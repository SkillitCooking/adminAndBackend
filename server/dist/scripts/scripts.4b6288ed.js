"use strict";angular.module("SkillitAdminApp",["ngAnimate","ngCookies","ngResource","ngRoute","ngSanitize","ngTouch","restangular","ui.select"]).constant("_",window._).config(["$routeProvider","RestangularProvider",function(a,b){a.when("/",{templateUrl:"views/recipes.html",controller:"RecipeCtrl",controllerAs:"recipe"}).when("/recipes",{templateUrl:"views/recipes.html",controller:"RecipeCtrl",controllerAs:"recipe"}).when("/editRecipes",{templateUrl:"views/editrecipes.html",controller:"EditRecipesCtrl",controllerAs:"editRecipes"}).when("/ingredients",{templateUrl:"views/ingredients.html",controller:"IngredientCtrl",controllerAs:"ingredient"}).when("/dishes",{templateUrl:"views/dishes.html",controller:"DishesCtrl",controllerAs:"dishes"}).when("/seasoningprofiles",{templateUrl:"views/seasoningprofiles.html",controller:"SeasoningprofilesCtrl",controllerAs:"seasoningprofiles"}).when("/viewAllRecipes",{templateUrl:"views/viewallrecipes.html",controller:"ViewallrecipesCtrl",controllerAs:"viewAllRecipes"}).when("/itemCollections",{templateUrl:"views/itemcollections.html",controller:"ItemcollectionsCtrl",controllerAs:"itemCollections"}).when("/glossaryEntries",{templateUrl:"views/glossaryentries.html",controller:"GlossaryentriesCtrl",controllerAs:"glossaryEntries"}).when("/trainingVideos",{templateUrl:"views/trainingvideos.html",controller:"TrainingvideosCtrl",controllerAs:"trainingVideos"}).when("/howToShopEntry",{templateUrl:"views/howtoshopentry.html",controller:"HowtoshopentryCtrl",controllerAs:"howToShopEntry"}).when("/dailyTips",{templateUrl:"views/dailytips.html",controller:"DailytipsCtrl",controllerAs:"dailyTips"}).when("/article",{templateUrl:"views/article.html",controller:"ArticleCtrl",controllerAs:"article"}).when("/lesson",{templateUrl:"views/lesson.html",controller:"LessonCtrl",controllerAs:"lesson"}).when("/chapter",{templateUrl:"views/chapter.html",controller:"ChapterCtrl",controllerAs:"chapter"}).when("/editIngredients",{templateUrl:"views/editingredients.html",controller:"EditIngredientsCtrl",controllerAs:"editIngredients"}).when("/editArticles",{templateUrl:"views/editarticles.html",controller:"EditArticlesCtrl",controllerAs:"editArticles"}).when("/editLessons",{templateUrl:"views/editlessons.html",controller:"EditLessonsCtrl",controllerAs:"editLessons"}).when("/editChapter",{templateUrl:"views/editchapter.html",controller:"EditChapterCtrl",controllerAs:"editChapter"}).when("/editDailyTips",{templateUrl:"views/editdailytips.html",controller:"EditDailytipsCtrl",controllerAs:"editDailyTips"}).when("/editDishes",{templateUrl:"views/editdishes.html",controller:"EditDishesCtrl",controllerAs:"editDishes"}).when("/editGlossaryEntries",{templateUrl:"views/editglossaryentries.html",controller:"EditGlossaryEntriesCtrl",controllerAs:"editGlossaryEntries"}).when("/editHowToShopEntries",{templateUrl:"views/edithowtoshopentries.html",controller:"EditHowToShopEntriesCtrl",controllerAs:"editHowToShopEntries"}).when("/editItemCollections",{templateUrl:"views/edititemcollections.html",controller:"EditItemCollectionsCtrl",controllerAs:"editItemCollections"}).when("/editSeasoningProfiles",{templateUrl:"views/editseasoningprofiles.html",controller:"EditSeasoningProfilesCtrl",controllerAs:"editSeasoningProfiles"}).when("/editTrainingVideos",{templateUrl:"views/edittrainingvideos.html",controller:"EditTrainingVideosCtrl",controllerAs:"editTrainingVideos"}).otherwise({redirectTo:"/"}),b.setBaseUrl("/api")}]),angular.module("SkillitAdminApp").controller("RecipeCtrl",["$window","$scope","recipeService","seasoningService","ingredientService","dishService","itemCollectionService","_",function(a,b,c,d,e,f,g,h){b.integerval=/^\d*$/,b.recipe={canAddSeasoningProfile:!0,mainVideo:{}},g.getItemCollectionsForType("recipe").then(function(a){b.recipeCollections=a.data},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message)}),d.getAllSeasonings().then(function(a){b.seasoningProfiles=a.data},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message)}),e.getAllIngredients().then(function(a){b.ingredients=a},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message)}),f.getAllDishes().then(function(a){b.dishes=a},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message)}),b.stepTypes=["Bake","Boil","BringToBoil","Cook","Custom","Cut","Dry","Heat","Place","PreheatOven","Sautee","Season","SlowCook","Steam","EquipmentPrep","Stir"],b.recipeTypes=["AlaCarte","BYO","Full"],b.recipeCategories=["Sautee","Easy Dinners","Scramble","Roast","Pasta","Hash","Rice","Quinoa"],b.cookingMethods=["Bake","Sautee","Boil","Steam","SlowCook"],b.servingSizes=["1-2","2-3","3-4","4-5","5-6","6-7","7-8","8-9","9-10"],b.selectedIngredientForms=[],b.constructingStep={},b.constructingStep.stepInputs={},b.ingredientList={ingredientTypes:[],equipmentNeeded:[]},b.stepList=[],b.logRecipeName=function(){b.originalName=b.recipe.name},b.updateRecipeName=function(){var a=b.recipe.name.split(" ");if(b.squishedRecipeName=a.join(""),b.stepList)for(var c=b.stepList.length-1;c>=0;c--){b.stepList[c].stepId=b.squishedRecipeName+c;for(var d in b.stepList[c].stepInputs)if(Array.isArray(b.stepList[c].stepInputs[d])){for(var e=b.stepList[c].stepInputs[d].length-1;e>=0;e--)if(b.stepList[c].stepInputs[d][e].sourceId)for(var f=b.stepList.length-1;f>=0;f--)if(b.stepList[f].stepId===b.stepList[c].stepInputs[d][e].sourceId){b.stepList[c].stepInputs[d][e].sourceId=b.squishedRecipeName+f;break}}else{var g=b.stepList;if(b.stepList[c].stepInputs[d].sourceId)for(var e=g.length-1;e>=0;e--)if(g[e].stepId===b.stepList[c].stepInputs[d].sourceId){b.stepList[c].stepInputs[d].sourceId=b.squishedRecipeName+e;break}}}},b.setSelectedIngredientForms=function(a){var c;c=a&&a.ingredientForms?a.ingredientForms.length:0,b.selectedIngredientForms=new Array(c),b.selectedIngredientForms.fill(!0)},b.addCookingMethod=function(){b.recipe.otherCookingMethods||(b.recipe.otherCookingMethods=[]),-1===b.recipe.otherCookingMethods.indexOf(b.otherCookingMethod)&&b.recipe.otherCookingMethods.push(b.otherCookingMethod)},b.removeCookingMethod=function(a){b.recipe.otherCookingMethods.splice(a,1)},b.isAFormSelected=function(){if(0===b.selectedIngredientForms.length)return!1;for(var a=b.selectedIngredientForms.length-1;a>=0;a--)if(b.selectedIngredientForms[a])return!0;return!1},b.ingredientCanBeAdded=function(a){for(var c,d=b.ingredientList.ingredientTypes,e=d.length-1;e>=0;e--){c=d[e].ingredients;for(var f=c.length-1;f>=0;f--)if(c[f].name===a.name)return!1}return!0},b.addTypeIngredient=function(a,c){if(b.ingredientCanBeAdded(c)){for(var d=[],e=c.ingredientForms.length-1;e>=0;e--)b.selectedIngredientForms[e]&&d.push(c.ingredientForms[e]);var f={name:c.name,ingredientForms:d,ingredientTips:c.ingredientTips,inputCategory:c.inputCategory,_id:c._id};b.ingredientList.ingredientTypes[a].ingredients||(b.ingredientList.ingredientTypes[a].ingredients=[]),b.ingredientList.ingredientTypes[a].ingredients.push(f)}},b.removeTypeIngredient=function(a,b){a.ingredients.splice(b,1)},b.removeIngredientType=function(a){b.ingredientList.ingredientTypes.splice(a,1)},b.addIngredientType=function(){b.ingredientList.ingredientTypes||(b.ingredientList.ingredientTypes=[]),b.ingredientList.ingredientTypes.push({typeName:"",displayName:"",ingredients:[],minNeeded:""})},b.addSeasoning=function(){b.recipe.choiceSeasoningProfiles||(b.recipe.choiceSeasoningProfiles=[]),-1===b.recipe.choiceSeasoningProfiles.indexOf(b.availableSeasoning)&&b.recipe.choiceSeasoningProfiles.push(b.availableSeasoning)},b.removeSeasoning=function(a){b.recipe.choiceSeasoningProfiles.splice(a,1)},b.addDish=function(){b.ingredientList.equipmentNeeded||(b.ingredientList.equipmentNeeded=[]),-1===b.ingredientList.equipmentNeeded.indexOf(b.typeDish)&&b.ingredientList.equipmentNeeded.push(b.typeDish)},b.removeDish=function(a){b.ingredientList.equipmentNeeded.splice(a,1)},b.addStep=function(){if(!b.squishedRecipeName){var a=b.recipe.name.split(" ");b.squishedRecipeName=a.join("")}b.constructingStep.stepId=b.squishedRecipeName+h.uniqueId(b.constructingStep.stepType),b.constructingStep.productKeys=[b.constructingStep.productName],b.constructingStep.productName=void 0,b.stepList.push(b.constructingStep),b.constructingStep={},b.constructingStep.stepInputs={}},b.removeStep=function(){b.stepList=b.recipe.stepList=h.dropRight(b.stepList)},b.addCollection=function(){b.recipe.collectionIds||(b.recipe.collectionIds=[]),b.curCollectionId&&""!==b.curCollectionId&&(b.recipe.collectionIds.push(b.curCollectionId),b.curCollectionId="")},b.removeCollection=function(a){b.recipe.collectionIds.splice(a,1)},b.recipeSanityCheck=function(){return b.recipe.stepList&&0!==b.recipe.stepList.length&&b.recipe.ingredientList&&b.recipe.ingredientList.ingredientTypes&&0!==b.recipe.ingredientList.ingredientTypes.length&&b.recipe.ingredientList.equipmentNeeded&&b.recipe.collectionIds&&0!==b.recipe.collectionIds.length?!0:!1},b.reset=function(){confirm("Are You Sure You Want To reset?")&&a.location.reload(!0)},b.save=function(){b.recipe.ingredientList=b.ingredientList,b.recipe.stepList=b.stepList,b.recipe.canAddSeasoningProfile||(b.recipe.canAddSeasoningProfile=!1),b.recipe.choiceSeasoningProfiles||(b.recipe.choiceSeasoningProfiles=[]);for(var a=b.seasoningProfiles.length-1;a>=0;a--)b.seasoningProfiles[a].useInChoiceSeasonings&&(delete b.seasoningProfiles[a].useInChoiceSeasonings,b.recipe.choiceSeasoningProfiles.push(b.seasoningProfiles[a]));b.recipe.collectionIds||(b.recipe.collectionIds=[]);for(var a=b.recipeCollections.length-1;a>=0;a--)b.recipeCollections[a].useInRecipe&&(delete b.recipeCollections[a].useInRecipe,b.recipe.collectionIds.push(b.recipeCollections[a]._id));b.getGlobalCookTimes(),c.addNewRecipe({recipe:{name:b.recipe.name,description:b.recipe.description,defaultServingSize:b.recipe.defaultServingSize,recipeType:b.recipe.recipeType,collectionIds:b.recipe.collectionIds,recipeCategory:b.recipe.recipeCategory,ingredientList:b.recipe.ingredientList,stepList:b.recipe.stepList,primaryCookingMethod:b.recipe.primaryCookingMethod,otherCookingMethods:b.recipe.otherCookingMethods,canAddSeasoningProfile:b.recipe.canAddSeasoningProfile,defaultSeasoningProfile:b.recipe.defaultSeasoningProfile,choiceSeasoningProfiles:b.recipe.choiceSeasoningProfiles,primaryIngredientType:b.recipe.primaryIngredientType,mainPictureURL:b.recipe.mainPictureURL,mainVideo:b.recipe.mainVideo,prepTime:b.recipe.prepTime,totalTime:b.recipe.totalTime,manActiveTime:b.recipe.manActiveTime,manTotalTime:b.recipe.manTotalTime,hasBeenRecipeOfTheDay:!1,datesUsedAsRecipeOfTheDay:[],isRecipeOfTheDay:!1}}).then(function(a){var c="Success! Recipe "+a.name+" was saved!";alert(c),b.reset()},function(a){console.log("Server Error: ",a);var c="";for(var d in a)c+=d+": "+a[d]+"\n";alert("Server Error: "+c),b.reset()})},b.isPrepStep=function(a){return["BringToBoil","Custom","Cut","Dry","Heat","Place","PreheatOven","Season","EquipmentPrep","Stir"].includes(a)},b.getGlobalCookTimes=function(){b.recipe.prepTime=0,b.recipe.totalTime=0;for(var a=b.recipe.stepList.length-1;a>=0;a--)b.recipe.totalTime+=parseInt(b.recipe.stepList[a].stepDuration,10),b.isPrepStep(b.recipe.stepList[a].stepType)&&(b.recipe.prepTime+=parseInt(b.recipe.stepList[a].stepDuration,10))},b.preview=function(){b.recipe.ingredientList=b.ingredientList,b.recipe.stepList=b.stepList,b.recipe.choiceSeasoningProfiles||(b.recipe.choiceSeasoningProfiles=[]);for(var a=b.seasoningProfiles.length-1;a>=0;a--)b.seasoningProfiles[a].useInChoiceSeasonings&&(delete b.seasoningProfiles[a].useInChoiceSeasonings,b.recipe.choiceSeasoningProfiles.push(b.seasoningProfiles[a]));b.recipe.collectionIds||(b.recipe.collectionIds=[]);for(var a=b.recipeCollections.length-1;a>=0;a--)b.recipeCollections[a].useInRecipe&&(delete b.recipeCollections[a].useInRecipe,b.recipe.collectionIds.push(b.recipeCollections[a]._id))}}]),angular.module("SkillitAdminApp").controller("IngredientCtrl",["$window","$scope","ingredientService",function(a,b,c){b.integerval=/^\d*$/,b.ingredient={name:{}},c.getAllIngredients().then(function(a){b.ingredients=a},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message)}),b.inForms=[],b.inputCategories=["Protein","Vegetables","Starches","Other"],b.inputSubCategories=[],b.cookingMethods=["Bake","Sautee","Boil","Steam","SlowCook"],b.addCookingTime=function(a){a.cookingTimes.push({cookingMethod:"",minTime:"",maxTime:"",timesArePerSide:!1})},b.changeInputCategory=function(){if(b.ingredient)switch(b.ingredient.inputCategory){case"Protein":b.inputSubCategories=["Meat","Seafood","Other"];break;default:b.inputSubCategories=["None"]}},b.addIngredientForm=function(){b.inForms.push({name:"",cookingTimes:[{cookingMethod:"",minTime:"",maxTime:"",timesArePerSide:!1}]})},b.removeCookingTime=function(a,b){a.cookingTimes.splice(b,1)},b.removeIngredientForm=function(a){b.inForms.splice(a,1)},b.ingredientTips=[],b.stepTypes=["Bake","Boil","BringToBoil","Cook","Custom","Cut","Dry","Heat","Place","PreheatOven","Sautee","Season","SlowCook","Steam","EquipmentPrep","Stir"],b.subTypes=[],b.setSubTypes=function(a,c){switch(a){case"Cut":b.subTypes[c]=["Cut","Chop","Dice","Slice","Mince","all"];break;case"Dry":b.subTypes[c]=["Pat","Rub","all"];break;case"EquipmentPrep":b.subTypes[c]=["Grease","Line","all"];break;case"Stir":b.subTypes[c]=["Stir","Flip","all"];break;default:b.subTypes[c]=["all"]}},b.removeTip=function(a){b.ingredientTips.splice(a,1)},b.addIngredientTip=function(){b.ingredientTips.push({stepType:"",videoInfo:{}})},b.ingredientSanityCheck=function(){return b.ingredient.ingredientForms?!0:!1},b.reset=function(){a.location.reload(!0)},b.preview=function(){b.ingredient.ingredientForms=b.inForms,b.ingredient.ingredientTips=b.ingredientTips},b.save=function(){b.ingredient.ingredientForms=b.inForms,b.ingredient.ingredientTips=b.ingredientTips,c.addNewIngredient({ingredient:{name:b.ingredient.name,ingredientForms:b.ingredient.ingredientForms,ingredientTips:b.ingredient.ingredientTips,inputCategory:b.ingredient.inputCategory,inputSubCategory:b.ingredient.inputSubCategory,units:b.ingredient.units,unitIsASingleItem:b.ingredient.unitIsASingleItem,servingsPerUnit:b.ingredient.servingsPerUnit,useFormNameForDisplay:b.ingredient.useFormNameForDisplay,nameFormFlag:"standardForm"}}).then(function(a){b.ingredients.push(a),alert("Successfully saved ingredient"),b.reset()},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message),b.reset()})}}]),angular.module("SkillitAdminApp").controller("DishesCtrl",["$window","$scope","dishService",function(a,b,c){b.integerval=/^\d*$/,c.getAllDishes().then(function(a){b.dishes=a},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),b.reset=function(){a.location.reload(!0)},b.save=function(){c.addNewDish({dish:{name:b.dish.name,ingredientCapacity:b.dish.ingredientCapacity}}).then(function(a){alert("Successfully saved dish"),b.dishes.push(a),b.reset()},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message),b.reset()})}}]),angular.module("SkillitAdminApp").controller("SeasoningprofilesCtrl",["$window","$scope","seasoningService",function(a,b,c){c.getAllSeasonings().then(function(a){b.profiles=a.data},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),b.reset=function(){a.location.reload(!0)},b.save=function(){for(var a=b.seasoningProfile.spices.split(","),d=a.length-1;d>=0;d--)a[d]=a[d].trim();c.addNewSeasoning({seasoningProfile:{name:b.seasoningProfile.name,spices:a}}).then(function(a){b.profiles.push(a),alert("Successfully saved seasoning"),b.reset()},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message),b.reset()})}}]),angular.module("SkillitAdminApp").factory("seasoningService",["Restangular",function(a){var b=a.all("seasoningProfiles");return{getAllSeasonings:function(){return b.customGET("/")},addNewSeasoning:function(a){return b.post(a)},updateSeasoning:function(a){return b.customPUT({seasoningProfile:a},"/"+a._id)},deleteSeasoning:function(a){return b.customDELETE("/"+a._id)}}}]),angular.module("SkillitAdminApp").factory("dishService",["Restangular",function(a){var b=a.all("dishes");return{getAllDishes:function(){return b.getList()},addNewDish:function(a){return b.post(a)},updateDish:function(a){return b.customPUT({dish:a},"/"+a._id)},deleteDish:function(a){return b.customDELETE("/"+a._id)}}}]),angular.module("SkillitAdminApp").factory("ingredientService",["Restangular",function(a){var b=a.all("ingredients");return{getAllIngredients:function(){return b.getList()},addNewIngredient:function(a){return b.post(a)},updateIngredient:function(a){return b.customPUT({ingredient:a},"/"+a._id)},deleteIngredient:function(a){return b.customDELETE("/"+a._id)}}}]),angular.module("SkillitAdminApp").factory("recipeService",["Restangular",function(a){var b=a.all("recipes");return{getAllRecipes:function(){return b.customGET("/")},addNewRecipe:function(a){return b.post(a)},updateRecipe:function(a){return b.customPUT({recipe:a},"/"+a._id)},deleteRecipe:function(a){return b.customDELETE("/"+a._id)}}}]),angular.module("SkillitAdminApp").controller("ViewallrecipesCtrl",["$scope","recipeService",function(a,b){b.getAllRecipes().then(function(b){a.recipes=b.data,a.isExpandedArr=[],a.isExpandedArr.fill(!1)},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message)}),a.toggleRecipeExpansion=function(b){a.isExpandedArr[b]=!a.isExpandedArr[b]}}]),angular.module("SkillitAdminApp").directive("cutStepInput",function(){return{templateUrl:"views/cutstepinput.html",scope:!0,transclude:!1,restrict:"E",link:function(a,b,c){a.showExampleText=!1,a.integerval=/^\d*$/,a.tipAdded=!1,a.tipIsMinimized=!0,a.actionTypes=["Cut","Chop","Dice","Slice","Mince"],a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"actionType",val:""},{propName:"actionModifier",val:""}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("stepInputForm",function(){return{templateUrl:"views/stepinputform.html",restrict:"E",scope:{step:"=constructingStep",stepInputName:"@inputName",isMultiple:"@isMultiple",ingredientList:"<ingredientList",stepList:"=stepList"},transclude:!1,link:function(a,b,c){if(a.sourceTypes=["EquipmentList","StepProduct","IngredientList"],a.getStepFromId=function(b){for(var c=a.stepList.length-1;c>=0;c--)if(a.stepList[c].stepId===b)return a.stepList[c]},a.step.stepId&&("false"===a.isMultiple&&a.step.stepInputs&&"StepProduct"===a.step.stepInputs[a.stepInputName].sourceType&&(a.sourceIdStep=a.getStepFromId(a.step.stepInputs[a.stepInputName].sourceId)),"true"===a.isMultiple&&(a.sourceIdStep=[],a.step.stepInputs&&a.step.stepInputs[a.stepInputName])))for(var d=0;d<=a.step.stepInputs[a.stepInputName].length-1;d++)"StepProduct"===a.step.stepInputs[a.stepInputName][d].sourceType&&(a.sourceIdStep[d]=a.getStepFromId(a.step.stepInputs[a.stepInputName][d].sourceId));a.showStepId=function(){return a.step.stepInputs&&a.step.stepInputs[a.stepInputName]&&a.step.stepInputs[a.stepInputName].sourceType&&"StepProduct"===a.step.stepInputs[a.stepInputName].sourceType?!0:!1},a.showStepIdMultiple=function(b){return a.sourceIdStep||(a.sourceIdStep=[]),b&&b.sourceType&&"StepProduct"===b.sourceType?!0:!1},a.getSourceIdSelectName=function(a,b){return"Step "+b+" => a "+a.stepType+" step "},a.registerSourceId=function(b){b&&(a.step.stepInputs[a.stepInputName].sourceId=b.stepId)},a.registerSourceIdMultiple=function(a,b,c){a.sourceId=c[b].stepId},a.removeInput=function(b){a.step.stepInputs[a.stepInputName].splice(b,1)},a.addInput=function(){a.step.stepInputs[a.stepInputName]||(a.step.stepInputs[a.stepInputName]=[]),a.step.stepInputs[a.stepInputName].push({sourceType:"",sourceId:"",key:"",inputName:a.stepInputName})},a.getProductKeys=function(a){return a?a.productKeys?a.productKeys:[a.productName]:void 0}}}}),angular.module("SkillitAdminApp").directive("cutStepItem",function(){return{templateUrl:"views/cutstepitem.html",restrict:"E",scope:!1,transclude:!1}}),angular.module("SkillitAdminApp").directive("bakeStepInput",function(){return{templateUrl:"views/bakestepinput.html",restrict:"E",transclude:!1,scope:!0,link:function(a,b,c){a.integerval=/^\d*$/,a.showExampleText=!1,a.tipAdded=!1,a.tipIsMinimized=!0,a.auxiliaryStepTypeNames=[],a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"bakingTime",val:""}],a.removeAuxStep=function(b){a.constructingStep.auxiliarySteps.splice(b,1)},a.addAuxStep=function(){a.constructingStep.auxiliarySteps||(a.constructingStep.auxiliarySteps=[]),a.constructingStep.auxiliarySteps.push({stepSpecifics:[{propName:"whenToStir",val:""},{propName:"stirType",val:""}]})},a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("stirStepInput",function(){return{templateUrl:"views/stirstepinput.html",restrict:"E",transclude:!1,scope:{isAuxiliaryStep:"@isAuxStep",constructingStep:"=",ingredientList:"<",stepList:"<",auxStepArrIndex:"="},link:function(a,b,c){a.showExampleText=!1,a.integerval=/^\d*$/,a.stirTypes=["Stir","Flip"],a.tipAdded=!1,a.tipIsMinimized=!0,a.auxStepArrIndex&&(a.auxStepArrIndex=parseInt(a.auxStepArrIndex,10)),"false"===a.isAuxiliaryStep&&(a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"whenToStir",val:""},{propName:"stirType",val:""}]),a.isAuxDictionary=function(a){switch(a){case"Bake":return!0;case"Sautee":return!1;default:return!1}},a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("stirStepItem",function(){return{templateUrl:"views/stirstepitem.html",restrict:"E",transclude:!1,scope:!1,link:function(a,b,c){}}}),angular.module("SkillitAdminApp").directive("bakeStepItem",function(){return{templateUrl:"views/bakestepitem.html",restrict:"E",transclude:!1,scope:!1}}),angular.module("SkillitAdminApp").directive("bringToBoilStepInput",function(){return{templateUrl:"views/bringtoboilstepinput.html",restrict:"E",transclude:!1,scope:!0,link:function(a,b,c){a.integerval=/^\d*$/,a.tipAdded=!1,a.tipIsMinimized=!0,a.showExampleText=!1,a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"waterAmount",val:""}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("bringToBoilStepItem",function(){return{templateUrl:"views/bringtoboilstepitem.html",restrict:"E",transclude:!1,scope:!1}}),angular.module("SkillitAdminApp").directive("dryStepInput",function(){return{templateUrl:"views/drystepinput.html",restrict:"E",scope:!0,transclude:!1,link:function(a,b,c){a.integerval=/^\d*$/,a.dryMethods=["Pat","Rub"],a.tipAdded=!1,a.tipIsMinimized=!0,a.showExampleText=!1,a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"dryMethod",val:""}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("dryStepItem",function(){return{templateUrl:"views/drystepitem.html",restrict:"E",scope:!1,transclude:!1}}),angular.module("SkillitAdminApp").directive("heatStepInput",function(){return{templateUrl:"views/heatstepinput.html",restrict:"E",transclude:!1,scope:!0,link:function(a,b,c){a.integerval=/^\d*$/,a.tipAdded=!1,a.tipIsMinimized=!0,a.showExampleText=!1,a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"heatsOil",val:!1},{propName:"heatSetting",val:""}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!0,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("heatStepItem",function(){return{templateUrl:"views/heatstepitem.html",restrict:"E",transclude:!1,scope:!1}}),angular.module("SkillitAdminApp").directive("placeStepInput",function(){return{templateUrl:"views/placestepinput.html",restrict:"E",scope:!0,transclude:!1,link:function(a,b,c){a.integerval=/^\d*$/,a.showExampleText=!1,a.tipAdded=!1,a.tipIsMinimized=!0,a.placeTypes=["Place","Add","Combine","Mix","Plate"],a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"placeModifier",val:""},{propName:"placeType",val:""}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("placeStepItem",function(){return{templateUrl:"views/placestepitem.html",restrict:"E",transclude:!1,scope:!1}}),angular.module("SkillitAdminApp").directive("preheatOvenStepInput",function(){return{templateUrl:"views/preheatovenstepinput.html",restrict:"E",transclude:!1,scope:!0,link:function(a,b,c){a.integerval=/^\d*$/,a.tipAdded=!1,a.tipIsMinimized=!0,a.showExampleText=!1,a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"ovenTemperature",val:""}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("preheatOvenStepItem",function(){return{templateUrl:"views/preheatovenstepitem.html",restrict:"E",scope:!1,transclude:!1}}),angular.module("SkillitAdminApp").directive("sauteeStepInput",function(){return{templateUrl:"views/sauteestepinput.html",restrict:"E",scope:!0,transclude:!1,link:function(a,b,c){a.integerval=/^\d*$/,a.tipAdded=!1,a.tipIsMinimized=!0,a.showExampleText=!1,a.auxStepAdded=!1,a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"sauteeDuration",val:""}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0},a.addAuxStep=function(){a.auxStepAdded=!a.auxStepAdded,a.constructingStep.auxiliarySteps=[{stepSpecifics:[{propName:"whenToStir",val:""},{propName:"stirType",val:""}]}]},a.removeAuxStep=function(){a.auxStepAdded=!a.auxStepAdded,a.constructingStep.auxiliarySteps=[{stepSpecifics:[{propName:"whenToStir",val:""},{propName:"stirType",val:""}]}]}}}}),angular.module("SkillitAdminApp").directive("sauteeStepItem",function(){return{templateUrl:"views/sauteestepitem.html",restrict:"E",scope:!1,transclude:!1}}),angular.module("SkillitAdminApp").directive("seasonStepInput",function(){return{templateUrl:"views/seasonstepinput.html",restrict:"E",scope:!0,transclude:!1,link:function(a,b,c){a.integerval=/^\d*$/,a.showExampleText=!1,a.tipAdded=!1,a.tipIsMinimized=!0,a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"isOil",val:!1},{propName:"isSeason",val:!1}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("seasonStepItem",function(){return{templateUrl:"views/seasonstepitem.html",restrict:"E",scope:!1,transclude:!1}}),angular.module("SkillitAdminApp").directive("slowCookStepInput",function(){return{templateUrl:"views/slowcookstepinput.html",restrict:"E",scope:!0,transclude:!1,link:function(a,b,c){a.integerval=/^\d*$/,a.showExampleText=!1,a.tipAdded=!1,a.tipIsMinimized=!0,a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"slowCookDuration",val:""},{propName:"tempSetting",val:""}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("slowCookStepItem",function(){return{templateUrl:"views/slowcookstepitem.html",restrict:"E",scope:!1,transclude:!1}}),angular.module("SkillitAdminApp").directive("equipmentPrepStepInput",function(){return{templateUrl:"views/equipmentprepstepinput.html",restrict:"E",scope:!0,transclude:!1,link:function(a,b,c){a.integerval=/^\d*$/,a.showExampleText=!1,a.tipAdded=!1,a.tipIsMinimized=!0,a.prepActionTypes=["Grease","Line"],a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"prepActionType",val:""},{propName:"prepModifier",val:""}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("equipmentPrepStepItem",function(){
return{templateUrl:"views/equipmentprepstepitem.html",restrict:"E",scope:!1,transclude:!1}}),angular.module("SkillitAdminApp").directive("steamStepInput",function(){return{templateUrl:"views/steamstepinput.html",restrict:"E",scope:!0,transclude:!1,link:function(a,b,c){a.integerval=/^\d*$/,a.showExampleText=!1,a.tipAdded=!1,a.tipIsMinimized=!0,a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"steamingDuration",val:""}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("steamStepItem",function(){return{templateUrl:"views/steamstepitem.html",restrict:"E",scope:!1,transclude:!1}}),angular.module("SkillitAdminApp").directive("boilStepInput",function(){return{templateUrl:"views/boilstepinput.html",restrict:"E",scope:!0,transclude:!1,link:function(a,b,c){a.integerval=/^\d*$/,a.showExampleText=!1,a.tipAdded=!1,a.tipIsMinimized=!0,a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"cookAccordingToInstructions",val:!1},{propName:"boilingDuration",val:""}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("boilStepItem",function(){return{templateUrl:"views/boilstepitem.html",restrict:"E",scope:!1,transclude:!1}}),angular.module("SkillitAdminApp").directive("customStepInput",function(){return{templateUrl:"views/customstepinput.html",restrict:"E",scope:!0,transclude:!1,link:function(a,b,c){a.integerval=/^\d*$/,a.tipAdded=!1,a.tipIsMinimized=!0,a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"customStepText",val:""}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0}}}}),angular.module("SkillitAdminApp").directive("customStepItem",function(){return{templateUrl:"views/customstepitem.html",restrict:"E",scope:!1,transclude:!1}}),angular.module("SkillitAdminApp").directive("cookstepitem",function(){return{templateUrl:"views/cookstepitem.html",scope:!1,transclude:!1,restrict:"E"}}),angular.module("SkillitAdminApp").directive("cookStepInput",function(){return{templateUrl:"views/cookstepinput.html",scope:!1,transclude:!1,restrict:"E",link:function(a,b,c){a.integerval=/^\d*$/,a.tipAdded=!1,a.tipIsMinimized=!0,a.showExampleText=!1,a.auxStepAdded=!1,a.cookTypes=["Cook"],a.logStep=function(){console.log("constructing Stpe",a.constructingStep)},a.constructingStep.stepId?(a.constructingStep.productName=a.constructingStep.productKeys[0],a.constructingStep.stepTip&&(a.tipAdded=!0)):a.constructingStep.stepSpecifics=[{propName:"cookType",val:""},{propName:"cookDuration",val:""},{propName:"cookAccordingToInstructions",val:!1}],a.toggleTipVisibility=function(){a.tipIsMinimized=!a.tipIsMinimized},a.getTipToggleText=function(){return a.tipIsMinimized?"Expand":"Minimize"},a.addTip=function(){a.tipAdded=!a.tipAdded,a.tipIsMinimized=!1,a.stepTip={videoInfo:{}}},a.removeTip=function(){a.tipAdded=!a.tipAdded,a.constructingStep.stepTip=void 0},a.addAuxStep=function(){a.auxStepAdded=!a.auxStepAdded,a.constructingStep.auxiliarySteps=[{stepSpecifics:[{propName:"whenToStir",val:""},{propName:"stirType",val:""}]}]},a.removeAuxStep=function(){a.auxStepAdded=!a.auxStepAdded,a.constructingStep.auxiliarySteps=[{stepSpecifics:[{propName:"whenToStir",val:""},{propName:"stirType",val:""}]}]}}}}),angular.module("SkillitAdminApp").controller("ItemcollectionsCtrl",["$window","$scope","itemCollectionService",function(a,b,c){b.itemCollection={},b.itemTypes=["dailyTip","trainingVideo","howToShop","glossary","recipe"],b.reset=function(){a.location.reload(!0)},b.save=function(){c.addNewItemCollection({itemCollection:{name:b.itemCollection.name,description:b.itemCollection.description,itemType:b.itemCollection.itemType}}).then(function(a){console.log("collection: ",a);var c="Success! Item Collection "+a.data.name+" was saved!";alert(c),b.reset()},function(a){console.log("Server Error: ",a),alert("Server Error: ",a),b.reset()})}}]),angular.module("SkillitAdminApp").controller("GlossaryentriesCtrl",["$window","$scope","glossaryService","itemCollectionService",function(a,b,c,d){d.getItemCollectionsForType("glossary").then(function(a){b.glossaryCollections=a.data},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),b.glossaryEntry={picture:{},video:{},collectionIds:[]},b.curCollectionId="",b.addCollection=function(){b.curCollectionId&&""!==b.curCollectionId&&(b.glossaryEntry.collectionIds.push(b.curCollectionId),b.curCollectionId="")},b.removeCollection=function(a){b.glossaryEntry.collectionIds.splice(a,1)},b.reset=function(){a.location.reload(!0)},b.save=function(){c.addNewGlossaryEntry({glossaryEntry:{title:b.glossaryEntry.title,text:b.glossaryEntry.text,picture:b.glossaryEntry.picture,video:b.glossaryEntry.video,collectionIds:b.glossaryEntry.collectionIds}}).then(function(a){var c="Success! Tip "+a.data.title+" was saved!";alert(c),b.reset()},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message),b.reset()})},b.glossaryEntrySanityCheck=function(){return b.glossaryEntry.collectionIds&&b.glossaryEntry.collectionIds.length>0?b.glossaryEntry.picture.url&&b.glossaryEntry.video.videoId?!0:b.glossaryEntry.picture.url?b.glossaryEntry.video.caption&&""!==b.glossaryEntry.video.caption?!1:!0:b.glossaryEntry.video.videoId?b.glossaryEntry.picture.caption&&""!==b.glossaryEntry.picture.caption?!1:!0:b.glossaryEntry.video.caption&&""!==b.glossaryEntry.video.caption||b.glossaryEntry.picture.caption&&""!==b.glossaryEntry.picture.caption?!1:!0:!1}}]),angular.module("SkillitAdminApp").controller("TrainingvideosCtrl",["$window","$scope","trainingVideosService","itemCollectionService",function(a,b,c,d){d.getItemCollectionsForType("trainingVideo").then(function(a){b.trainingVideoCollections=a.data},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message)}),b.trainingVideo={video:{},picture:{},collectionIds:[]},b.removeCollection=function(a){b.trainingVideo.collectionIds.splice(a,1)},b.addCollection=function(){b.curCollectionId&&""!==b.curCollectionId&&(b.trainingVideo.collectionIds.push(b.curCollectionId),b.curCollectionId="")},b.curCollectionId="",b.reset=function(){a.location.reload(!0)},b.save=function(){c.addNewTrainingVideo({trainingVideo:{title:b.trainingVideo.title,video:b.trainingVideo.video,picture:b.trainingVideo.picture,collectionIds:b.trainingVideo.collectionIds}}).then(function(a){var c="Success! Video "+a.data.title+" was saved!";alert(c),b.reset()},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message),b.reset()})},b.trainingVideoSanityCheck=function(){return b.trainingVideo.video.videoId&&""!==b.trainingVideo.video.videoId&&b.trainingVideo.picture.url&&""!==b.trainingVideo.picture.url&&b.trainingVideo.collectionIds&&b.trainingVideo.collectionIds.length>0?!0:!1}}]),angular.module("SkillitAdminApp").controller("HowtoshopentryCtrl",["$window","$scope","howToShopService","itemCollectionService",function(a,b,c,d){d.getItemCollectionsForType("howToShop").then(function(a){b.howToShopCollections=a.data},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message)}),b.howToShopEntry={},b.curCollectionId="",b.removeCollection=function(a){b.howToShopEntry.collectionIds.splice(a,1)},b.addCollection=function(){b.howToShopEntry.collectionIds||(b.howToShopEntry.collectionIds=[]),b.curCollectionId&&""!==b.curCollectionId&&(b.howToShopEntry.collectionIds.push(b.curCollectionId),b.curCollectionId="")},b.addPicture=function(){b.howToShopEntry.pictures||(b.howToShopEntry.pictures=[]),b.howToShopEntry.pictures.push({url:"",caption:""})},b.removePicture=function(a){b.howToShopEntry.pictures.splice(a,1)},b.reset=function(){a.location.reload(!0)},b.save=function(){c.addNewHowToShopEntry({howToShopEntry:{title:b.howToShopEntry.title,text:b.howToShopEntry.text,pictures:b.howToShopEntry.pictures,collectionIds:b.howToShopEntry.collectionIds}}).then(function(a){var c="Success! Entry "+a.data.title+" was saved!";alert(c),b.reset()},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message),b.reset()})},b.howToShopEntrySanityCheck=function(){if(b.howToShopEntry.collectionIds&&b.howToShopEntry.collectionIds.length>0){if(b.howToShopEntry.pictures)for(var a=b.howToShopEntry.pictures.length-1;a>=0;a--)if(!b.howToShopEntry.pictures[a].url||""===b.howToShopEntry.pictures[a].url)return!1;return!0}return!1}}]),angular.module("SkillitAdminApp").controller("DailytipsCtrl",["$window","$scope","dailyTipsService","itemCollectionService",function(a,b,c,d){d.getItemCollectionsForType("dailyTip").then(function(a){b.tipCollections=a.data},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message)}),b.dailyTip={picture:{},video:{},collectionIds:[]},b.curCollectionId="",b.removeCollection=function(a){b.dailyTip.collectionIds.splice(a,1)},b.addCollection=function(){b.curCollectionId&&""!==b.curCollectionId&&(b.dailyTip.collectionIds.push(b.curCollectionId),b.curCollectionId="")},b.reset=function(){a.location.reload(!0)},b.save=function(){c.addNewDailyTip({dailyTip:{title:b.dailyTip.title,text:b.dailyTip.text,picture:b.dailyTip.picture,video:b.dailyTip.video,collectionIds:b.dailyTip.collectionIds,hasBeenDailyTip:!1,isTipOfTheDay:!1}}).then(function(a){var c="Success! Tip "+a.data.title+" was saved!";alert(c),b.reset()},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message),b.reset()})},b.dailyTipSanityCheck=function(){return b.dailyTip.collectionIds&&b.dailyTip.collectionIds.length>0?b.dailyTip.picture.url&&b.dailyTip.video.videoId?!0:b.dailyTip.picture.url?b.dailyTip.video.caption&&""!==b.dailyTip.video.caption?!1:!0:b.dailyTip.video.videoId?b.dailyTip.picture.caption&&""!==b.dailyTip.picture.caption?!1:!0:b.dailyTip.video.caption&&""!==b.dailyTip.video.caption||b.dailyTip.picture.caption&&""!==b.dailyTip.picture.caption?!1:!0:!1}}]),angular.module("SkillitAdminApp").factory("dailyTipsService",["Restangular",function(a){var b=a.all("dailyTips");return{getAllDailyTips:function(){return b.customGET("/")},addNewDailyTip:function(a){return b.post(a)},updateDailyTip:function(a){return b.customPUT({tip:a},"/"+a._id)},deleteDailyTip:function(a){return b.customDELETE("/"+a._id)}}}]),angular.module("SkillitAdminApp").factory("itemCollectionService",["Restangular",function(a){var b=a.all("itemCollections");return{getAllItemCollections:function(){return b.customGET("/")},addNewItemCollection:function(a){return b.post(a)},getItemCollectionsForType:function(a){return b.customPOST({itemType:a},"getCollectionsForItemType")},updateItemCollection:function(a){return b.customPUT({collection:a},"/"+a._id)},deleteItemCollection:function(a){return b.customDELETE("/"+a._id)}}}]),angular.module("SkillitAdminApp").factory("glossaryService",["Restangular",function(a){var b=a.all("glossaryEntries");return{getAllGlossaryEntries:function(){return b.customGET("/")},addNewGlossaryEntry:function(a){return b.post(a)},updateGlossaryEntry:function(a){return b.customPUT({entry:a},"/"+a._id)},deleteGlossaryEntry:function(a){return b.customDELETE("/"+a._id)}}}]),angular.module("SkillitAdminApp").factory("howToShopService",["Restangular",function(a){var b=a.all("howToShopEntries");return{getAllHowToShopEntries:function(){return b.customGET("/")},addNewHowToShopEntry:function(a){return b.post(a)},updateHowToShopEntry:function(a){return b.customPUT({entry:a},"/"+a._id)},deleteHowToShopEntry:function(a){return b.customDELETE("/"+a._id)}}}]),angular.module("SkillitAdminApp").factory("trainingVideosService",["Restangular",function(a){var b=a.all("trainingVideos");return{getAllTrainingVideos:function(){return b.customGET("/")},addNewTrainingVideo:function(a){return b.post(a)},updateTrainingVideo:function(a){return b.customPUT({trainingVideo:a},"/"+a._id)},deleteTrainingVideo:function(a){return b.customDELETE("/"+a._id)}}}]),angular.module("SkillitAdminApp").controller("ArticleCtrl",["$window","$scope","articleService","dailyTipsService","glossaryService","trainingVideosService","howToShopService",function(a,b,c,d,e,f,g){d.getAllDailyTips().then(function(a){b.tips=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),e.getAllGlossaryEntries().then(function(a){b.glossaryEntries=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),f.getAllTrainingVideos().then(function(a){b.trainingVideos=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),g.getAllHowToShopEntries().then(function(a){b.howToShopEntries=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),b.contentSection={},b.addContentSection=function(){b.article.contentSections||(b.article.contentSections=[]),console.log("contentSection",angular.copy(b.contentSection)),b.article.contentSections.push(b.contentSection),b.contentSection=angular.copy({})},b.removeContentSection=function(a){b.article.contentSections.splice(a,1)},b.save=function(){c.addNewArticle({title:b.article.title,contentSections:b.article.contentSections}).then(function(a){a=a.data;var c="Success! Article "+a.title+" was saved!";alert(c),b.reset()},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message),b.reset()})},b.reset=function(){a.location.reload(!0)},b.togglePreview=function(){b.showArticlePreview=!b.showArticlePreview}}]),angular.module("SkillitAdminApp").controller("LessonCtrl",["$window","$scope","articleService","dailyTipsService","glossaryService","howToShopService","trainingVideosService","lessonService",function(a,b,c,d,e,f,g,h){c.getArticlesTitleId().then(function(a){b.lesson.articles=a.data,console.log("articles: ",b.lesson.articles)},function(a){alert("Server Error - see console logs for details"),console.log("error response: ",a)}),d.getAllDailyTips().then(function(a){b.tips=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),e.getAllGlossaryEntries().then(function(a){b.glossaryEntries=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),g.getAllTrainingVideos().then(function(a){b.trainingVideos=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),f.getAllHowToShopEntries().then(function(a){b.howToShopEntries=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),b.itemTypes=["tip","glossary","howToShop","trainingVideo"],b.lesson={itemIds:[]},b.getSelectedTypeItems=function(){switch(b.itemType){case"tip":return b.tips;case"glossary":return b.glossaryEntries;case"howToShop":return b.howToShopEntries;case"trainingVideo":return b.trainingVideos;default:return[]}},b.addItem=function(){b.lesson.itemIds||(b.lesson.itemIds=[]),b.lesson.itemIds.push({id:b.selectedItem,type:b.itemType})},b.canAddAllForItemType=function(){return!b.lesson.isArticle&&b.itemType&&""!==b.itemType?!0:!1},b.addAllOfItemType=function(){b.lesson.itemIds||(b.lesson.itemIds=[]);for(var a=b.getSelectedTypeItems(),c=a.length-1;c>=0;c--)b.lesson.itemIds.push({id:a[c]._id,type:b.itemType})},b.removeItemId=function(a){b.lesson.itemIds.splice(a,1)},b.save=function(){h.addNewLesson({name:b.lesson.name,timeEstimate:b.lesson.timeEstimate,description:b.lesson.description,isArticle:b.lesson.isArticle,articleId:b.lesson.articleId,itemIds:b.lesson.itemIds}).then(function(a){var c=a.data,d="Success! Lesson "+c.name+" was saved!";alert(d),b.reset()},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a),b.reset()})},b.reset=function(){a.location.reload(!0)},b.getArticleLabel=function(){return b.lesson.isArticle},b.getItemLabel=function(){return!b.lesson.isArticle}}]),angular.module("SkillitAdminApp").controller("ChapterCtrl",["$window","$scope","lessonService","chapterService",function(a,b,c,d){c.getLessonsForChapterConstruction().then(function(a){b.lessons=a.lessons},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),b.chapter={},b.timeEstimates=[],b.addLesson=function(){b.chapter.lessonIds||(b.chapter.lessonIds=[]),b.timeEstimates.push(b.selectedLesson.timeEstimate),b.chapter.lessonIds.push(b.selectedLesson._id)},b.removeLesson=function(a){b.timeEstimates.splice(a,1),b.chapter.lessonIds.splice(a,1)},b.save=function(){var a=b.timeEstimates.reduce(function(a,b){return parseInt(a,10)+parseInt(b,10)});d.addNewChapter({name:b.chapter.name,description:b.chapter.description,lessonIds:b.chapter.lessonIds,timeEstimate:a}).then(function(a){var c=a.data,d="Success! Chapter "+c.name+" was saved!";alert(d),b.reset()},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message),b.reset()})},b.reset=function(){a.location.reload(!0)}}]),angular.module("SkillitAdminApp").directive("textchunk",function(){return{templateUrl:"views/textchunk.html",scope:!0,transclude:!1,restrict:"E",link:function(a,b,c){a.itemTypes=["None","tip","glossary","howToShop","trainingVideo"],a.getTitle=function(b){switch(a.textChunk.itemType){case"tip":case"glossary":case"howToShop":case"trainingVideo":return b.title;default:return""}},a.getItemsForType=function(){switch(a.textChunk.itemType){case"tip":return a.tips;case"glossary":return a.glossaryEntries;case"howToShop":return a.howToShopEntries;case"trainingVideo":return a.trainingVideos;default:return[]}}}}}),angular.module("SkillitAdminApp").directive("contentsection",function(){return{templateUrl:"views/contentsection.html",scope:!0,transclude:!1,restrict:"E",link:function(a,b,c){a.contentTypes=["text","picture","video"],a.textChunks=[],a.textChunksIndicator=[],a.textChunk={},a.contentIndicatorArray=[],a.picture={},a.video={},a.toggleContentPiece=function(b){a.contentIndicatorArray[b]=!a.contentIndicatorArray[b]},a.removeContent=function(b){a.contentIndicatorArray.splice(b,1),a.contentSection.contentArray.splice(b,1)},a.toggleTextChunk=function(b){a.textChunksIndicator[b]=!a.textChunksIndicator[b]},a.removeTextChunk=function(b){a.textChunks.splice(b,1),a.textChunksIndicator.splice(b,1)},a.addTextChunk=function(){a.textChunks.push(a.textChunk),a.textChunksIndicator.push(!1),a.textChunk=angular.copy({})},a.resetContentProperties=function(){a.textChunks=angular.copy([]),a.textChunksIndicator=angular.copy([]),a.picture=angular.copy({}),a.video=angular.copy({})},a.logPicture=function(){console.log("picture url: ",a.picture.pictureURL),console.log("picture caption: ",a.picture.pictureCaption)},a.addContent=function(){switch(a.contentSection.contentArray||(a.contentSection.contentArray=[]),a.contentType){case"text":a.contentSection.contentArray.push({type:"text",textChunks:a.textChunks}),a.contentIndicatorArray.push(!1),a.resetContentProperties();break;case"picture":a.contentSection.contentArray.push({type:"picture",url:a.picture.pictureURL,caption:a.picture.pictureCaption}),a.contentIndicatorArray.push(!1),a.resetContentProperties();break;case"video":a.contentSection.contentArray.push({type:"video",videoId:a.video.videoId,end:a.video.end,caption:a.video.videoCaption}),a.contentIndicatorArray.push(!1),a.resetContentProperties()}}}}}),angular.module("SkillitAdminApp").directive("contentitem",function(){return{templateUrl:"views/contentitem.html",scope:{item:"="},restrict:"E",link:function(a,b,c){a.getText=function(){for(var b=0,c="",d=a.item.textChunks.length-1;d>=0;d--)c+=a.item.textChunks[d].text,a.item.textChunks[d].linkedItem&&(c+="["+b+"]"),0!==d&&(c+=" "),b++;return c},a.getFootnotes=function(){if(!a.footnotes){a.footnotes=[];for(var b=a.item.textChunks.length-1;b>=0;b--)a.item.textChunks[b].linkedItem&&a.footnotes.push({title:a.item.textChunks[b].linkedItem.title,type:a.item.textChunks[b].linkedItem.itemType,id:a.item.textChunks[b].linkedItem._id})}return a.footnotes}}}}),angular.module("SkillitAdminApp").directive("contentSectionItem",function(){return{templateUrl:"views/contentsectionitem.html",restrict:"E",scope:{section:"="},link:function(a,b,c){}}}),angular.module("SkillitAdminApp").factory("articleService",["Restangular",function(a){var b=a.all("articles");return{addNewArticle:function(a){return b.post({article:a})},getArticlesTitleId:function(){return b.customGET("/getArticlesTitleId")},getAllArticles:function(){return b.customGET("/")},updateArticle:function(a){return b.customPUT({article:a},"/"+a._id)},deleteArticle:function(a){return b.customDELETE("/"+a._id)}}}]),angular.module("SkillitAdminApp").directive("articlepreview",function(){return{templateUrl:"views/articlepreview.html",scope:!0,transclude:!1,restrict:"E",link:function(a,b,c){a.logArticle=function(){console.log("article: ",a.article)},a.logSection=function(a){console.log("section: ",a)},a.getText=function(a){console.log("item: ",a);for(var b=0,c="",d=a.textChunks.length-1;d>=0;d--)c+=a.textChunks[d].text,a.textChunks[d].linkedItem&&(c+="["+b+"]"),0!==d&&(c+=" "),b++;return c},a.getFootnotes=function(b){a.footnotes||(a.footnotes=[]);for(var c=b.textChunks.length-1;c>=0;c--)b.textChunks[c].linkedItem&&a.footnotes.push({title:b.textChunks[c].linkedItem.title,type:b.textChunks[c].linkedItem.itemType,id:b.textChunks[c].linkedItem._id});return a.footnotes}}}}),angular.module("SkillitAdminApp").factory("lessonService",["Restangular",function(a){var b=a.all("lessons");return{addNewLesson:function(a){return b.post({lesson:a})},getLessonsForChapterConstruction:function(){return b.customGET("/getLessonsForChapterConstruction")},getAllLessons:function(){return b.customGET("/")},updateLesson:function(a){return b.customPUT({lesson:a},"/"+a._id)},deleteLesson:function(a){return b.customDELETE("/"+a._id)}}}]),angular.module("SkillitAdminApp").factory("chapterService",["Restangular",function(a){var b=a.all("chapters");return{addNewChapter:function(a){return b.post({chapter:a})},getAllChapters:function(){return b.customGET("/")},updateChapter:function(a){return b.customPUT({chapter:a},"/"+a._id)},deleteChapter:function(a){return b.customDELETE("/"+a._id)}}}]),angular.module("SkillitAdminApp").controller("EditRecipesCtrl",["$window","$scope","recipeService","itemCollectionService","seasoningService","ingredientService","dishService",function(a,b,c,d,e,f,g){b.integerval=/^\d*$/,b.recipeTypes=["AlaCarte","BYO","Full"],b.recipeCategories=["Sautee","Scramble","Easy Dinners","Roast","Pasta","Hash","Rice","Quinoa"],b.servingSizes=["1-2","2-3","3-4","4-5","5-6","6-7","7-8","8-9","9-10"],b.cookingMethods=["Bake","Sautee","Boil","Steam","SlowCook"],b.stepTypes=["Bake","Boil","BringToBoil","Cook","Custom","Cut","Dry","Heat","Place","PreheatOven","Sautee","Season","SlowCook","Steam","EquipmentPrep","Stir"],b.constructingStep={},b.constructingStep.stepInputs={},b.selectedIngredientForms=[],b.selectedRecipe={},c.getAllRecipes().then(function(a){b.recipes=[];for(var c=a.data.length-1;c>=0;c--)b.recipes.push({label:a.data[c].name,value:a.data[c]})},function(a){console.log("server error",a),alert("Server Error: "+a.message)}),d.getItemCollectionsForType("recipe").then(function(a){b.recipeCollections=a.data},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),e.getAllSeasonings().then(function(a){b.seasoningProfiles=a.data},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),f.getAllIngredients().then(function(a){b.ingredients=a},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),g.getAllDishes().then(function(a){b.dishes=a},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),b.reloadRecipes=function(){b.showSelectRecipe=!0,c.getAllRecipes().then(function(a){b.recipes=a.data},function(a){console.log("server error",a),alert("Server Error: "+a.message)})},b.originalName="",b.logRecipeName=function(){b.originalName=b.recipe.name},b.updateRecipeName=function(){var a=b.recipe.name.split(" ");if(b.squishedRecipeName=a.join(""),b.recipe.stepList)for(var c=b.recipe.stepList.length-1;c>=0;c--){b.recipe.stepList[c].stepId=b.squishedRecipeName+c;for(var d in b.recipe.stepList[c].stepInputs)if(Array.isArray(b.recipe.stepList[c].stepInputs[d])){for(var e=b.recipe.stepList[c].stepInputs[d].length-1;e>=0;e--)if(b.recipe.stepList[c].stepInputs[d][e].sourceId)for(var f=b.recipe.stepList.length-1;f>=0;f--)if(b.recipe.stepList[f].stepId===b.recipe.stepList[c].stepInputs[d][e].sourceId){b.recipe.stepList[c].stepInputs[d][e].sourceId=b.squishedRecipeName+f;break}}else{var g=b.recipe.stepList;if(b.recipe.stepList[c].stepInputs[d].sourceId)for(var e=g.length-1;e>=0;e--)if(g[e].stepId===b.recipe.stepList[c].stepInputs[d].sourceId){b.recipe.stepList[c].stepInputs[d].sourceId=b.squishedRecipeName+e;break}}}},b.changeSelectedRecipe=function(){if(b.selectedRecipe&&b.selectedRecipe.name){b.selectedRecipeIndex=b.recipes.indexOf(b.selectedRecipe),b.recipe=angular.copy(b.selectedRecipe),b.ingredientList=b.recipe.ingredientList,b.stepList=b.recipe.stepList,b.typeMinimizedIndicatorArray=new Array(b.recipe.ingredientList.ingredientTypes.length),b.typeMinimizedIndicatorArray.fill(!0),b.stepMinimizedIndicatorArray=new Array(b.stepList.length),b.stepMinimizedIndicatorArray.fill(!0);for(var a=b.recipe.ingredientList.ingredientTypes,c=a.length-1;c>=0;c--)a[c].ingredientMinimizedIndicator=new Array(a[c].ingredients.length),a[c].ingredientMinimizedIndicator.fill(!0);if(b.recipeCollections)for(var c=b.recipe.collectionIds.length-1;c>=0;c--){var d=_.findIndex(b.recipeCollections,function(a){return a._id===b.recipe.collectionIds[c]});d>-1&&(b.recipeCollections[d].useInRecipe=!0)}if(b.seasoningProfiles)for(var c=b.recipe.choiceSeasoningProfiles.length-1;c>=0;c--){var d=_.findIndex(b.seasoningProfiles,function(a){return a._id===b.recipe.choiceSeasoningProfiles[c]._id});d>-1&&(b.seasoningProfiles[d].useInChoiceSeasonings=!0)}}},b.removeCollection=function(a){b.recipe.collectionIds.splice(a,1)},b.addCollection=function(){b.recipe.collectionIds.push(b.curCollectionId)},b.removeCookingMethod=function(a){b.recipe.otherCookingMethods.splice(a,1)},b.addCookingMethod=function(){b.recipe.otherCookingMethods.push(b.otherCookingMethod)},b.addSeasoning=function(){b.recipe.choiceSeasoningProfiles.push(b.availableSeasoning)},b.removeSeasoning=function(a){b.recipe.choiceSeasoningProfiles.splice(a,1)},b.isIngredientMinimized=function(a){return b.typeMinimizedIndicatorArray[a]},b.setSelectedIngredientForms=function(a){var c;c=a&&a.ingredientForms?a.ingredientForms.length:0,b.selectedIngredientForms=new Array(c),b.selectedIngredientForms.fill(!0)},b.isAFormSelected=function(){if(0===b.selectedIngredientForms.length)return!1;for(var a=b.selectedIngredientForms.length-1;a>=0;a--)if(b.selectedIngredientForms[a])return!0;return!1},b.addTypeIngredient=function(a,c){if(b.ingredientCanBeAdded(c)){for(var d=[],e=c.ingredientForms.length-1;e>=0;e--)b.selectedIngredientForms[e]&&d.push(c.ingredientForms[e]);var f={name:c.name,ingredientForms:d,ingredientTips:c.ingredientTips,inputCategory:c.inputCategory,_id:c._id};b.recipe.ingredientList.ingredientTypes[a].ingredients||(b.recipe.ingredientList.ingredientTypes[a].ingredients=[]),b.recipe.ingredientList.ingredientTypes[a].ingredients.push(f)}},b.ingredientCanBeAdded=function(a){for(var c,d=b.recipe.ingredientList.ingredientTypes,e=d.length-1;e>=0;e--){c=d[e].ingredients;for(var f=c.length-1;f>=0;f--)if(c[f].name===a.name)return!1}return!0},b.isIngredientMinimized=function(a,b){return a.ingredientMinimizedIndicator[b]},b.toggleIngredientExpand=function(a,b){a.ingredientMinimizedIndicator[b]=!a.ingredientMinimizedIndicator[b]},b.removeTypeIngredient=function(a,b){a.ingredients.splice(b,1),a.ingredientMinimizedIndicator.splice(b,1)},b.isIngredientTypeMinimized=function(a){return b.typeMinimizedIndicatorArray[a]},b.toggleIngredientTypeExpand=function(a){b.typeMinimizedIndicatorArray[a]=!b.typeMinimizedIndicatorArray[a]},b.removeIngredientType=function(a){b.typeMinimizedIndicatorArray.splice(a,1),b.recipe.ingredientList.ingredientTypes.splice(a,1)},b.addIngredientType=function(){b.recipe.ingredientList.ingredientTypes||(b.recipe.ingredientList.ingredientTypes=[]),b.recipe.ingredientList.ingredientTypes.push({typeName:"",displayName:"",ingredients:[],minNeeded:""}),b.typeMinimizedIndicatorArray.push(!1)},b.addDish=function(){b.recipe.ingredientList.equipmentNeeded.push(b.typeDish)},b.removeDish=function(a){b.recipe.ingredientList.equipmentNeeded.splice(a,1)},b.isMinimizedStep=function(a){return b.stepMinimizedIndicatorArray[a]},b.toggleStepMinimize=function(a){b.stepMinimizedIndicatorArray[a]=!b.stepMinimizedIndicatorArray[a]},b.getStepMinimizeButtonText=function(a){return b.stepMinimizedIndicatorArray[a]?"Expand":"Minimize"},b.removeStep=function(a){b.recipe.stepList.splice(a,1),b.stepMinimizedIndicatorArray.splice(a,1)},b.getCurStepNumberFromStepList=function(){for(var a=b.recipe.stepList[b.recipe.stepList.length-1],c="",d=a.stepId.length-1;d>=0&&!isNaN(Number(a.stepId.charAt(d)));d--)c=a.stepId.charAt(d)+c;return c},b.addStep=function(){if(!b.squishedRecipeName){var a=b.recipe.name.split(" ");b.squishedRecipeName=a.join("")}b.curStepNumber||(b.recipe.stepList&&0!==b.recipe.stepList.length?b.curStepNumber=b.getCurStepNumberFromStepList():b.curStepNumber=0),b.curStepNumber+=1,b.constructingStep.stepId=b.squishedRecipeName+b.curStepNumber,b.constructingStep.productKeys=[b.constructingStep.productName],b.constructingStep.productName=void 0,b.recipe.stepList.push(b.constructingStep),b.constructingStep={},b.constructingStep.stepInputs={}},b.recipeSanityCheck=function(){return b.recipe&&b.recipe.stepList&&0!==b.recipe.stepList.length&&b.recipe.ingredientList&&b.recipe.ingredientList.ingredientTypes&&0!==b.recipe.ingredientList.ingredientTypes.length&&b.recipe.ingredientList.equipmentNeeded&&b.recipe.collectionIds&&0!==b.recipe.collectionIds.length?!0:!1},b.cancelChanges=function(){b.changeSelectedRecipe()},b.saveChanges=function(){b.recipe.choiceSeasoningProfiles=[];for(var d=b.seasoningProfiles.length-1;d>=0;d--)b.seasoningProfiles[d].useInChoiceSeasonings&&(delete b.seasoningProfiles[d].useInChoiceSeasonings,b.recipe.choiceSeasoningProfiles.push(b.seasoningProfiles[d]));b.recipe.collectionIds=[];for(var d=b.recipeCollections.length-1;d>=0;d--)b.recipeCollections[d].useInRecipe&&(delete b.recipeCollections[d].useInRecipe,b.recipe.collectionIds.push(b.recipeCollections[d]._id));c.updateRecipe({name:b.recipe.name,description:b.recipe.description,defaultServingSize:b.recipe.defaultServingSize,recipeType:b.recipe.recipeType,collectionIds:b.recipe.collectionIds,recipeCategory:b.recipe.recipeCategory,ingredientList:b.recipe.ingredientList,stepList:b.recipe.stepList,primaryCookingMethod:b.recipe.primaryCookingMethod,otherCookingMethods:b.recipe.otherCookingMethods,canAddSeasoningProfile:b.recipe.canAddSeasoningProfile,
defaultSeasoningProfile:b.recipe.defaultSeasoningProfile,choiceSeasoningProfiles:b.recipe.choiceSeasoningProfiles,primaryIngredientType:b.recipe.primaryIngredientType,mainPictureURL:b.recipe.mainPictureURL,mainVideo:b.recipe.mainVideo,prepTime:b.recipe.prepTime,totalTime:b.recipe.totalTime,manActiveTime:b.recipe.manActiveTime,manTotalTime:b.recipe.manTotalTime,hasBeenRecipeOfTheDay:b.recipe.hasBeenRecipeOfTheDay,datesUsedAsRecipeOfTheDay:b.recipe.datesUsedAsRecipeOfTheDay,isRecipeOfTheDay:b.recipe.isRecipeOfTheDay,_id:b.recipe._id}).then(function(b){alert("Recipe successfully updated!"),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})},b.deleteRecipe=function(){c.deleteRecipe({_id:b.recipe._id}).then(function(b){alert("Recipe successfully deleted"),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})},b.noRecipeNameChange=function(){return b.recipe?b.originalName===b.recipe.name:!0},b.duplicateRecipe=function(){delete b.recipe.ingredientList._id;for(var d=b.recipe.ingredientList.ingredientTypes.length-1;d>=0;d--)delete b.recipe.ingredientList.ingredientTypes[d]._id;for(var d=b.recipe.stepList.length-1;d>=0;d--){delete b.recipe.stepList[d]._id;for(var e=b.recipe.stepList[d].stepSpecifics.length-1;e>=0;e--)delete b.recipe.stepList[d].stepSpecifics[e]._id;for(var e=b.recipe.stepList[d].auxiliarySteps.length-1;e>=0;e--)delete b.recipe.stepList[d].auxiliarySteps[e]._id}b.recipe.choiceSeasoningProfiles=[];for(var d=b.seasoningProfiles.length-1;d>=0;d--)b.seasoningProfiles[d].useInChoiceSeasonings&&(delete b.seasoningProfiles[d].useInChoiceSeasonings,b.recipe.choiceSeasoningProfiles.push(b.seasoningProfiles[d]));b.recipe.collectionIds=[];for(var d=b.recipeCollections.length-1;d>=0;d--)b.recipeCollections[d].useInRecipe&&(delete b.recipeCollections[d].useInRecipe,b.recipe.collectionIds.push(b.recipeCollections[d]._id));c.addNewRecipe({recipe:{name:b.recipe.name,description:b.recipe.description,defaultServingSize:b.recipe.defaultServingSize,recipeType:b.recipe.recipeType,collectionIds:b.recipe.collectionIds,recipeCategory:b.recipe.recipeCategory,ingredientList:b.recipe.ingredientList,stepList:b.recipe.stepList,primaryCookingMethod:b.recipe.primaryCookingMethod,otherCookingMethods:b.recipe.otherCookingMethods,canAddSeasoningProfile:b.recipe.canAddSeasoningProfile,defaultSeasoningProfile:b.recipe.defaultSeasoningProfile,choiceSeasoningProfiles:b.recipe.choiceSeasoningProfiles,primaryIngredientType:b.recipe.primaryIngredientType,mainPictureURL:b.recipe.mainPictureURL,mainVideo:b.recipe.mainVideo,prepTime:b.recipe.prepTime,totalTime:b.recipe.totalTime,manActiveTime:b.recipe.manActiveTime,manTotalTime:b.recipe.manTotalTime,hasBeenRecipeOfTheDay:!1,datesUsedAsRecipeOfTheDay:[],isRecipeOfTheDay:!1}}).then(function(b){alert("Success! Recipe "+b.name+"was saved! Refresh form."),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})}}]),angular.module("SkillitAdminApp").directive("selectRefresh",function(){return{require:"ngModel",restrict:"A",scope:{options:"="},link:function(a,b,c){a.$watch(a.options,function(c){c&&a.$evalAsync(function(){b.selectpicker("refresh")})})}}}),angular.module("SkillitAdminApp").controller("EditIngredientsCtrl",["$window","$scope","ingredientService",function(a,b,c){b.integerval=/^\d*$/,b.inputCategories=["Protein","Vegetables","Starches","Other"],b.inputSubCategories=[],b.cookingMethods=["Bake","Sautee","Boil","Steam","SlowCook"],b.stepTypes=["Bake","Boil","BringToBoil","Cook","Custom","Cut","Dry","Heat","Place","PreheatOven","Sautee","Season","SlowCook","Steam","EquipmentPrep","Stir"],b.subTypes=[],c.getAllIngredients().then(function(a){b.ingredients=a},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),b.changeInputCategory=function(){if(b.ingredient)switch(b.ingredient.inputCategory){case"Protein":b.inputSubCategories=["Meat","Seafood","Other"];break;default:b.inputSubCategories=["None"]}},b.changeSelectedIngredient=function(){if(b.selectedIngredient){b.ingredient=angular.copy(b.selectedIngredient),b.ingredientTipsIndicatorArray=new Array(b.ingredient.ingredientTips.length),b.ingredientTipsIndicatorArray.fill(!0);for(var a=0;a<b.ingredients.length;a++)for(var c=0;c<b.ingredients[a].ingredientTips.length;c++)b.setSubTypes(b.ingredients[a].ingredientTips[c].stepType,c);b.ingredientFormsIndicatorArray=new Array(b.ingredient.ingredientForms.length),b.ingredientFormsIndicatorArray.fill(!0),b.changeInputCategory()}},b.isIngredientFormMinimized=function(a){return b.ingredientFormsIndicatorArray[a]},b.removeCookingTime=function(a,b){a.cookingTimes.splice(b,1)},b.addCookingTime=function(a){a.cookingTimes.push({cookingMethod:"",minTime:"",maxTime:"",timesArePerSide:!1})},b.removeIngredientForm=function(a){b.ingredient.ingredientForms.splice(a,1),b.ingredientFormsIndicatorArray.splice(a,1)},b.toggleIngredientForm=function(a){b.ingredientFormsIndicatorArray[a]=!b.ingredientFormsIndicatorArray[a]},b.getIngredientFormVisibilityText=function(a){return b.ingredientFormsIndicatorArray[a]?"Expand":"Minimize"},b.addIngredientForm=function(){b.ingredient.ingredientForms.push({name:"",cookingTimes:[{cookingMethod:"",minTime:"",maxTime:"",timesArePerSide:!1}]})},b.isIngredientTipMinimized=function(a){return b.ingredientTipsIndicatorArray[a]},b.setSubTypes=function(a,c){switch(a){case"Cut":b.subTypes[c]=["Cut","Chop","Dice","Slice","Mince","all"];break;case"Dry":b.subTypes[c]=["Pat","Rub","all"];break;case"EquipmentPrep":b.subTypes[c]=["Grease","Line","all"];break;case"Stir":b.subTypes[c]=["Stir","Flip","all"];break;default:b.subTypes[c]=["all"]}},b.toggleTip=function(a){b.ingredientTipsIndicatorArray[a]=!b.ingredientTipsIndicatorArray[a]},b.getTipVisibilityText=function(a){return b.ingredientTipsIndicatorArray[a]?"Expand":"Minimize"},b.removeTip=function(a){b.ingredient.ingredientTips.splice(a,1),b.ingredientTipsIndicatorArray.splice(a,1)},b.addIngredientTip=function(){b.ingredient.ingredientTips.push({stepType:"",videoInfo:{}})},b.cancelChanges=function(){b.changeSelectedIngredient()},b.saveChanges=function(){c.updateIngredient({name:b.ingredient.name,ingredientForms:b.ingredient.ingredientForms,ingredientTips:b.ingredient.ingredientTips,inputCategory:b.ingredient.inputCategory,inputSubCategory:b.ingredient.inputSubCategory,units:b.ingredient.units,unitIsASingleItem:b.ingredient.unitIsASingleItem,servingsPerUnit:b.ingredient.servingsPerUnit,nameFormFlag:"standardForm",useFormNameForDisplay:b.ingredient.useFormNameForDisplay,_id:b.ingredient._id}).then(function(b){var c="";b.affectedRecipeIds&&b.affectedRecipeIds.length>0&&(c+=" Affected Recipe Ids: \n"+b.affectedRecipeIds.toString()),alert("Ingredient successfully updated! Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})},b.deleteIngredient=function(){c.deleteIngredient({_id:b.ingredient._id}).then(function(b){var c="";b.affectedRecipeIds&&b.affectedRecipeIds.length>0&&(c+=" Affected Recipe Ids: \n"+b.affectedRecipeIds.toString()),alert("Ingredient successfully deleted. Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})}}]),angular.module("SkillitAdminApp").controller("EditArticlesCtrl",["$window","$scope","articleService","dailyTipsService","glossaryService","trainingVideosService","howToShopService",function(a,b,c,d,e,f,g){c.getAllArticles().then(function(a){b.articles=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),d.getAllDailyTips().then(function(a){b.tips=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),e.getAllGlossaryEntries().then(function(a){b.glossaryEntries=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),f.getAllTrainingVideos().then(function(a){b.trainingVideos=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),g.getAllHowToShopEntries().then(function(a){b.howToShopEntries=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),b.changeSelectedArticle=function(){b.selectedArticle&&(b.article=angular.copy(b.selectedArticle),b.contentSectionIndicatorArray=new Array(b.article.contentSections.length),b.contentSectionIndicatorArray.fill(!0))},b.isMinimizedContentSection=function(a){return b.contentSectionIndicatorArray[a]},b.removeContentSection=function(a){b.article.contentSections.splice(a,1),b.contentSectionIndicatorArray.splice(a,1)},b.toggleContentSection=function(a){b.contentSectionIndicatorArray[a]=!b.contentSectionIndicatorArray[a]},b.getContentSectionToggleText=function(a){return b.contentSectionIndicatorArray[a]?"Expand":"Minimize"},b.cancelChanges=function(){b.changeSelectedArticle()},b.saveChanges=function(){c.updateArticle({title:b.article.title,contentSections:b.article.contentSections,_id:b.article._id}).then(function(b){alert("Article successfully updated! Refresh page."),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})},b.deleteArticle=function(){c.deleteArticle({_id:b.article._id}).then(function(b){var c="";b.affectedLessonIds&&b.affectedLessonIds.length>0&&(c+=" Affected Lesson Ids: \n"+b.affectedLessonIds.toString()),alert("Article successfully deleted! Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})}}]),angular.module("SkillitAdminApp").directive("editContentSection",function(){return{templateUrl:"views/editcontentsection.html",restrict:"E",scope:{section:"=",tips:"=",glossaryEntries:"=glossaries",howToShopEntries:"=howtos",trainingVideos:"=trainings"},link:function(a,b,c){a.contentTypes=["text","picture","video"],a.contentPieceIndicatorArray=new Array(a.section.contentArray.length),a.contentPieceIndicatorArray.fill(!0),a.textChunkForPieceIndicator=new Array(a.section.contentArray.length);for(var d=0;d<a.section.contentArray.length;d++)"text"===a.section.contentArray[d].type?(a.textChunkForPieceIndicator[d]=new Array(a.section.contentArray[d].textChunks.length),a.textChunkForPieceIndicator[d].fill(!0)):a.textChunkForPieceIndicator[d]=[];a.contentPieceMinimized=function(b){return a.contentPieceIndicatorArray[b]},a.isMinimizedTextChunk=function(b,c){return a.textChunkForPieceIndicator[b][c]},a.removeTextChunk=function(b,c){a.section.contentArray[b].textChunks.splice(c,1),a.textChunkForPieceIndicator[b].splice(c,1)},a.toggleTextChunk=function(b,c){a.textChunkForPieceIndicator[b][c]=!a.textChunkForPieceIndicator[b][c]},a.addTextChunk=function(b){a.section.contentArray[b].textChunks||(a.section.contentArray[b].textChunks=[]),a.section.contentArray[b].textChunks.push({}),a.textChunkForPieceIndicator[b].push(!1)},a.getToggleTextChunkText=function(b,c){return a.textChunkForPieceIndicator[b][c]?"Expand":"Minimize"},a.removeContentPiece=function(b){a.section.contentArray.splice(b,1),a.contentPieceIndicatorArray.splice(b),a.textChunkForPieceIndicator.splice(b)},a.toggleContentPiece=function(b){a.contentPieceIndicatorArray[b]=!a.contentPieceIndicatorArray[b]},a.getContentPieceToggleText=function(b){return a.contentPieceIndicatorArray[b]?"Expand":"Minimize"},a.addContentPiece=function(){a.section.contentArray.push({}),a.contentPieceIndicatorArray.push(!1),a.textChunkForPieceIndicator.push([])}}}}),angular.module("SkillitAdminApp").controller("EditLessonsCtrl",["$window","$scope","lessonService","articleService","dailyTipsService","glossaryService","trainingVideosService","howToShopService",function(a,b,c,d,e,f,g,h){b.itemTypes=["tip","glossary","howToShop","trainingVideo"],c.getAllLessons().then(function(a){b.lessons=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),d.getArticlesTitleId().then(function(a){b.articles=a.data},function(a){alert("Server Error - see console logs for details"),console.log("error response: ",a)}),e.getAllDailyTips().then(function(a){b.tips=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),f.getAllGlossaryEntries().then(function(a){b.glossaryEntries=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),g.getAllTrainingVideos().then(function(a){b.trainingVideos=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),h.getAllHowToShopEntries().then(function(a){b.howToShopEntries=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),b.changeSelectedLesson=function(){b.selectedLesson&&(b.lesson=angular.copy(b.selectedLesson))},b.addItem=function(){b.lesson.itemIds.push({id:b.selectedItem,type:b.itemType})},b.canAddAllForItemType=function(){return b.lesson&&!b.lesson.isArticle&&b.itemType&&""!==b.itemType?!0:!1},b.addAllOfItemType=function(){for(var a=b.getSelectedTypeItems(),c=a.length-1;c>=0;c--)b.lesson.itemIds.push({id:a[c]._id,itemType:b.itemType})},b.getArticleLabel=function(){return b.lesson?b.lesson.isArticle:void 0},b.getItemLabel=function(){return b.lesson?!b.lesson.isArticle:void 0},b.getSelectedTypeItems=function(){switch(b.itemType){case"tip":return b.tips;case"glossary":return b.glossaryEntries;case"howToShop":return b.howToShopEntries;case"trainingVideo":return b.trainingVideos;default:return[]}},b.removeItemId=function(a){b.lesson.itemIds.splice(a,1)},b.cancelChanges=function(){b.changeSelectedLesson()},b.saveChanges=function(){c.updateLesson({name:b.lesson.name,timeEstimate:b.lesson.timeEstimate,description:b.lesson.description,isArticle:b.lesson.isArticle,articleId:b.lesson.articleId,itemIds:b.lesson.itemIds,_id:b.lesson._id}).then(function(b){alert("Lesson successfully updated! Refresh page."),a.location.reload(!0)},function(b){alert("Server Error - check console logs for details"),console.log("error response: ",b),a.location.reload(!0)})},b.deleteLesson=function(){c.deleteLesson({_id:b.lesson._id}).then(function(b){var c="";b.affectedChapterIds&&b.affectedChapterIds.length>0&&(c+=" Affected ChapterIds: \n"+b.affectedChapterIds.toString()),alert("Lesson successfully deleted. Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})}}]),angular.module("SkillitAdminApp").controller("EditChapterCtrl",["$window","$scope","chapterService","lessonService",function(a,b,c,d){c.getAllChapters().then(function(a){b.chapters=a.data},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),d.getLessonsForChapterConstruction().then(function(a){b.lessons=a.lessons},function(a){alert("Server Error - check console logs for details"),console.log("error response: ",a)}),b.changeSelectedChapter=function(){b.selectedChapter&&(b.chapter=angular.copy(b.selectedChapter),b.chapterTimeEstimate=parseInt(b.chapter.timeEstimate,10))},b.addLesson=function(){b.chapterTimeEstimate+=parseInt(b.selectedLesson.timeEstimate),b.chapter.lessonIds.push(b.selectedLesson._id)},b.removeLesson=function(a){for(var c,d=b.lessons.length-1;d>=0;d--)if(b.lessons[d]._id===b.chapter.lessonIds[a]){c=b.lessons[d];break}c?(b.chapterTimeEstimate-=parseInt(c.timeEstimate,10),b.chapter.lessonIds.splice(a,1)):console.log("Lesson couldn't be found via id matching")},b.cancelChanges=function(){b.changeSelectedChapter()},b.saveChanges=function(){c.updateChapter({name:b.chapter.name,description:b.chapter.description,lessonIds:b.chapter.lessonIds,timeEstimate:b.chapterTimeEstimate,_id:b.chapter._id}).then(function(b){alert("Chapter successfully updated! Refresh page."),a.location.reload(!0)},function(b){alert("Server Error - check console logs for details"),console.log("error response: ",b),a.location.reload(!0)})},b.deleteChapter=function(){c.deleteChapter({_id:b.chapter._id}).then(function(b){alert("Chapter successfully deleted! Refresh page."),a.location.reload(!0)},function(b){alert("Server Error - check console logs for details"),console.log("error response: ",b),a.location.reload(!0)})}}]),angular.module("SkillitAdminApp").controller("EditDailytipsCtrl",["$window","$scope","dailyTipsService","itemCollectionService",function(a,b,c,d){c.getAllDailyTips().then(function(a){b.tips=a.data},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),d.getItemCollectionsForType("dailyTip").then(function(a){b.tipCollections=a.data},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),b.changeSelectedTip=function(){b.selectedTip&&(b.dailyTip=angular.copy(b.selectedTip))},b.removeCollection=function(a){b.dailyTip.collectionIds.splice(a,1)},b.addCollection=function(){b.dailyTip.collectionIds.push(b.curCollectionId)},b.cancelChanges=function(){b.changeSelectedTip()},b.saveChanges=function(){c.updateDailyTip({title:b.dailyTip.title,text:b.dailyTip.text,picture:b.dailyTip.picture,video:b.dailyTip.video,collectionIds:b.dailyTip.collectionIds,hasBeenDailyTip:b.dailyTip.hasBeenDailyTip,isTipOfTheDay:b.dailyTip.isTipOfTheDay,_id:b.dailyTip._id}).then(function(b){var c="";console.log("affected: ",b.affectedArticleIds),b.affectedArticleIds&&b.affectedArticleIds.length>0&&(c=" Affected Articles that referenced Tip: \n"+b.affectedArticleIds.toString()),alert("DailyTip successfully updated! Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})},b.deleteDailyTip=function(){c.deleteDailyTip({_id:b.dailyTip._id}).then(function(b){var c="";b.affectedArticleIds&&b.affectedArticleIds.length>0&&(c+=" Affected ArticleIds: \n"+b.affectedArticleIds.toString()+"\n"),b.affectedLessonIds&&b.affectedLessonIds.length>0&&(c+=" Affected LessonIds: \n"+b.affectedLessonIds.toString()),alert("DailyTip successfully deleted! Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})}}]),angular.module("SkillitAdminApp").controller("EditDishesCtrl",["$window","$scope","dishService",function(a,b,c){b.integerval=b.integerval=/^\d*$/,c.getAllDishes().then(function(a){b.dishes=a},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),b.changeSelectedDish=function(){b.selectedDish&&(b.dish=angular.copy(b.selectedDish))},b.cancelChanges=function(){b.changeSelectedDish()},b.saveChanges=function(){c.updateDish({name:b.dish.name,ingredientCapacity:b.dish.ingredientCapacity,_id:b.dish._id}).then(function(b){var c="";b.affectedRecipeIds&&b.affectedRecipeIds.length>0&&(c+=" Affected Recipe Ids: \n"+b.affectedRecipeIds.toString()),alert("Dish successfully updated! Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})},b.deleteDish=function(){c.deleteDish({_id:b.dish._id}).then(function(b){var c="";b.affectedRecipeIds&&b.affectedRecipeIds.length>0&&(c+=" Affected Recipe Ids: \n"+b.affectedRecipeIds.toString()),alert("Dish successfully deleted! Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})}}]),angular.module("SkillitAdminApp").controller("EditGlossaryEntriesCtrl",["$window","$scope","glossaryService","itemCollectionService",function(a,b,c,d){c.getAllGlossaryEntries().then(function(a){b.glossaryEntries=a.data},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),d.getItemCollectionsForType("glossary").then(function(a){b.glossaryCollections=a.data},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),b.changeSelectedEntry=function(){b.selectedEntry&&(b.entry=angular.copy(b.selectedEntry))},b.removeCollection=function(a){b.entry.collectionIds.splice(a,1)},b.addCollection=function(){b.entry.collectionIds.push(b.curCollectionId)},b.cancelChanges=function(){b.changeSelectedEntry()},b.saveChanges=function(){c.updateGlossaryEntry({title:b.entry.title,text:b.entry.text,picture:b.entry.picture,video:b.entry.video,collectionIds:b.entry.collectionIds,_id:b.entry._id}).then(function(b){var c="";b.affectedArticleIds&&b.affectedArticleIds.length>0&&(c=" Affected Articles that referenced Tip: \n"+b.affectedArticleIds.toString()),alert("Glossary Entry successfully updated! Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})},b.deleteGlossary=function(){c.deleteGlossaryEntry({_id:b.entry._id}).then(function(b){var c="";b.affectedArticleIds&&b.affectedArticleIds.length>0&&(c+=" Affected ArticleIds: \n"+b.affectedArticleIds.toString()+"\n"),b.affectedLessonIds&&b.affectedLessonIds.length>0&&(c+=" Affected LessonIds: \n"+b.affectedLessonIds.toString()),alert("Glossary Entry successfully deleted! Refresh page"+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})}}]),angular.module("SkillitAdminApp").controller("EditHowToShopEntriesCtrl",["$window","$scope","howToShopService","itemCollectionService",function(a,b,c,d){c.getAllHowToShopEntries().then(function(a){b.howToShopEntries=a.data},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),d.getItemCollectionsForType("howToShop").then(function(a){b.howToShopCollections=a.data},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),b.changeSelectedEntry=function(){b.selectedEntry&&(b.howToShopEntry=angular.copy(b.selectedEntry))},b.removePicture=function(a){b.howToShopEntry.pictures.splice(a,1)},b.addPicture=function(){b.howToShopEntry.pictures.push({})},b.removeCollection=function(a){b.howToShopEntry.collectionIds.splice(a,1)},b.addCollection=function(){b.howToShopEntry.collectionIds.push(b.curCollectionId)},b.cancelChanges=function(){b.changeSelectedEntry()},b.saveChanges=function(){c.updateHowToShopEntry({title:b.howToShopEntry.title,text:b.howToShopEntry.text,pictures:b.howToShopEntry.pictures,collectionIds:b.howToShopEntry.collectionIds,_id:b.howToShopEntry._id}).then(function(b){var c="";b.affectedArticleIds&&b.affectedArticleIds.length>0&&(c=" Affected Articles that referenced Tip: \n"+b.affectedArticleIds.toString()),alert("Entry successfully updated. Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})},b.deleteEntry=function(){c.deleteHowToShopEntry({_id:b.howToShopEntry._id}).then(function(b){var c="";b.affectedArticleIds&&b.affectedArticleIds.length>0&&(c+=" Affected ArticleIds: \n"+b.affectedArticleIds.toString()+"\n"),b.affectedLessonIds&&b.affectedLessonIds.length>0&&(c+=" Affected LessonIds: \n"+b.affectedLessonIds.toString()),alert("Entry successfully deleted. Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})}}]),angular.module("SkillitAdminApp").controller("EditItemCollectionsCtrl",["$window","$scope","itemCollectionService",function(a,b,c){b.itemTypes=b.itemTypes=["dailyTip","trainingVideo","howToShop","glossary","recipe"],c.getAllItemCollections().then(function(a){var c=a.data;b.collections=[];for(var d in c)for(var e=c[d],f=e.length-1;f>=0;f--)e[f].displayName=e[f].name+" -- "+d,b.collections.push(e[f])},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),b.changeSelectedCollection=function(){b.selectedCollection&&(b.itemCollection=angular.copy(b.selectedCollection))},b.cancelChanges=function(){b.changeSelectedCollection()},b.saveChanges=function(){c.updateItemCollection({name:b.itemCollection.name,description:b.itemCollection.description,itemType:b.itemCollection.itemType,_id:b.itemCollection._id}).then(function(b){alert("ItemCollection successfully updated! Refresh page."),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})},b.deleteCollection=function(){c.deleteItemCollection({_id:b.itemCollection._id}).then(function(b){var c="";switch(b.type){case"tips":c+=" Affected TipIds: \n"+b.affectedIds.toString();break;case"videos":c+=" Affected VideoIds: \n"+b.affectedIds.toString();break;case"howToShop":c+=" Affected HowToShopIds: \n"+b.affectedIds.toString();break;case"glossary":c+=" Affected GlossaryIds: \n"+b.affectedIds.toString();break;case"recipe":c+=" Affected RecipeIds: \n"+b.affectedIds.toString()}alert("ItemCollection successfully deleted! Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})}}]),angular.module("SkillitAdminApp").controller("EditSeasoningProfilesCtrl",["$window","$scope","seasoningService",function(a,b,c){c.getAllSeasonings().then(function(a){b.seasonings=a.data},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),b.changeSelectedSeasoning=function(){b.selectedSeasoning&&(b.seasoningProfile=angular.copy(b.selectedSeasoning))},b.removeSpice=function(a){b.seasoningProfile.spices.splice(a,1)},b.addSpice=function(){b.seasoningProfile.spices.push("")},b.cancelChanges=function(){b.changeSelectedSeasoning()},b.saveChanges=function(){c.updateSeasoning({name:b.seasoningProfile.name,spices:b.seasoningProfile.spices,_id:b.seasoningProfile._id}).then(function(b){var c="";b.affectedRecipeIds&&b.affectedRecipeIds.length>0&&(c+=" Affected Recipe Ids: \n"+b.affectedRecipeIds.toString()),alert("Seasoning successfully updated! Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})},b.deleteSeasoningProfile=function(){c.deleteSeasoning({_id:b.seasoningProfile._id}).then(function(b){var c="";b.affectedRecipeIds&&b.affectedRecipeIds.length>0&&(c+=" Affected Recipe Ids: \n"+b.affectedRecipeIds.toString()),alert("Seasoning successfully deleted! Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})}}]),angular.module("SkillitAdminApp").controller("EditTrainingVideosCtrl",["$window","$scope","trainingVideosService","itemCollectionService",function(a,b,c,d){c.getAllTrainingVideos().then(function(a){b.videos=a.data},function(a){console.log("Server Error: ",a),alert("Server Error: "+a.message)}),d.getItemCollectionsForType("trainingVideo").then(function(a){b.trainingVideoCollections=a.data},function(a){console.log("Server Error: ",a.message),alert("Server Error: "+a.message)}),b.changeSelectedVideo=function(){b.selectedVideo&&(b.trainingVideo=angular.copy(b.selectedVideo))},b.removeCollection=function(a){b.trainingVideo.collectionIds.splice(a,1)},b.addCollection=function(){b.trainingVideo.collectionIds.push(b.curCollectionId)},b.cancelChanges=function(){b.changeSelectedVideo()},b.saveChanges=function(){c.updateTrainingVideo({title:b.trainingVideo.title,video:b.trainingVideo.video,picture:b.trainingVideo.picture,collectionIds:b.trainingVideo.collectionIds,_id:b.trainingVideo._id}).then(function(b){var c="";b.affectedArticleIds&&b.affectedArticleIds.length>0&&(c=" Affected Articles that referenced Tip: \n"+b.affectedArticleIds.toString()),alert("Video updated successfully! Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})},b.deleteVideo=function(){c.deleteTrainingVideo({_id:b.trainingVideo._id}).then(function(b){var c="";b.affectedArticleIds&&b.affectedArticleIds.length>0&&(c+=" Affected ArticleIds: \n"+b.affectedArticleIds.toString()+"\n"),b.affectedLessonIds&&b.affectedLessonIds.length>0&&(c+=" Affected LessonIds: \n"+b.affectedLessonIds.toString()),alert("Video successfully deleted! Refresh page."+c),a.location.reload(!0)},function(b){console.log("Server Error: ",b),alert("Server Error: "+b.message),a.location.reload(!0)})}}]),angular.module("SkillitAdminApp").run(["$templateCache",function(a){a.put("views/article.html",'<div> <h2>Input Article</h2> <a class="btn btn-link active" ng-href="#/article">Create</a> <a class="btn btn-link" ng-href="#/editArticles">Edit</a><br> <form novalidate name="articleForm"> Title: <input type="text" ng-model="article.title" size="50" required name="titleInput"><br><br> <div ng-form="contentForm"> <contentsection></contentsection> </div> <button class="btn btn-primary" ng-click="addContentSection()" ng-disabled="contentForm.$invalid">Add Content Section</button> <div ng-repeat="section in article.contentSections"> <content-section-item section="section"></content-section-item> <button class="btn btn-danger btn-sm" ng-click="removeContentSection($index)">Remove</button> </div> <button class="btn btn-success btn-large" ng-click="save()" ng-disabled="articleForm.$invalid">Save</button> <button class="btn btn-warning btn-large" ng-click="reset()">Reset</button> </form> <button class="btn btn-info btn-large" ng-show="!showArticlePreview" ng-click="togglePreview()">Preview Article</button> <button class="btn btn-info btn-large" ng-show="showArticlePreview" ng-click="togglePreview()">Minimize Preview</button> <articlepreview ng-if="showArticlePreview"></articlepreview> </div>'),a.put("views/articlepreview.html",'<div> <h2 ng-click="logArticle()">{{article.title}}</h2> <div ng-click="logSection(section)" ng-repeat="section in article.contentSections"> {{section.subTitle}} <div ng-repeat="piece in section.contentArray"> <div ng-switch on="piece.type"> <div ng-switch-when="text"> {{logSection(piece)}} {{getText(piece)}}<br> {{getFootnotes(piece)}} </div> <div ng-switch-when="picture"> {{logSection(piece)}} <img ng-src="{{piece.url}}"><br> <span>{{piece.caption}}</span> </div> <div ng-switch-when="video"> {{logSection(piece)}} <iframe width="300" height="169" ng-src="{{piece.url}}" frameborder="0" allowfullscreen></iframe> <span>{{piece.caption}}</span> </div> <div ng-switch-default></div> </div> </div> </div> </div>'),a.put("views/bakestepinput.html",'<div ng-form="bakeStepForm" class="bg-warning"> <b>Bake Step</b><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Baking Time: <input type="text" ng-model="constructingStep.stepSpecifics[0].val" required name="bakingTimeInput" size="50"><br> Product Input (Expects a Step): <step-input-form constructing-step="constructingStep" input-name="productInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Product Name: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <b>Auxiliary Stir Steps:</b> <div ng-repeat="auxStep in constructingStep.auxiliarySteps"> For IngredientType: <select ng-model="constructingStep.auxiliarySteps[$index].ingredientTypeName" ng-options="type.typeName as type.typeName for type in ingredientList.ingredientTypes" required></select><br> <stir-step-input is-aux-step="true" constructing-step="constructingStep" ingredient-list="ingredientList" step-list="stepList" aux-step-arr-index="$index"></stir-step-input> <button class="btn btn-xs btn-danger" ng-click="removeAuxStep($index)">Remove Auxiliary Stir Step</button><br><br> </div> <button class="btn btn-sm btn-danger" ng-click="addAuxStep()">Add Auxiliary Stir Step</button><br><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text:<br> <pre>Bake [ingredient1] and [ingredient2] for [bakingTime]. [auxiliaryStep1] and [auxiliaryStep2]</pre> </div> </div>'),
a.put("views/bakestepitem.html",'<div> <b>Bake Step</b><br> <p>Step Duration: {{step.stepDuration}}</p> <p>Baking Time: {{step.bakingTime}}</p> <p><b>Product Input</b></p> <p>SourceType: {{step.productInput.sourceType}}</p> <p ng-if="step.productInput.sourceId">SourceId: {{step.productInput.sourceId}}</p> <p>Key: {{step.productInput.key}}</p><br> <p>ProductName: {{step.productName}}</p> <div ng-if="step.auxiliarySteps.length > 0"> <p><em>Auxiliary Stir Steps</em></p> <div ng-repeat="stirStep in step.auxiliarySteps"> <p>IngredientType: {{stirStep.ingredientTypeName}}</p> <p>When To Stir: {{stirStep.whenToStir}}</p> <p>StirType: {{stirStep.stirType}}</p> </div> </div> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/boilstepinput.html",'<div ng-form="boilStepForm" class="bg-warning"> <b>Boil Step</b><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Boiling Duration: <input type="text" ng-model="constructingStep.stepSpecifics[1].val" name="boilingDurationInput" size="50"><br> Cooking According To Instructions: <input type="checkbox" ng-model="constructingStep.stepSpecifics[0].val"><br> Ingredient Inputs (step or ingredient type): <step-input-form constructing-step="constructingStep" input-name="ingredientInputs" is-multiple="true" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Dish Input (step or dish): <step-input-form constructing-step="constructingStep" input-name="dishInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Product Name: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text: <br> <pre>Boil the [members of ingredientInput1],..., and [members of ingredientInputN] in the [boilingDish] [accordingToPackageInstructions]/for [boiling Duration]</pre> </div> </div>'),a.put("views/boilstepitem.html",'<div> <b>Boil Step</b><br> <p>Step Duration: {{step.stepDuration}}</p> <p>Boiling Duration: {{step.boilingDuration}}</p> <p><em>Ingredient Inputs</em></p> <div ng-repeat="input in step.ingredientInputs"> <p>SourceType: {{input.sourceType}}</p> <p>SourceId: {{input.sourceId}}</p> <p>Key: {{input.key}}</p> <br> </div> <p><em>Dish Product Input</em></p> <p>SourceType: {{step.dishInput.sourceType}}</p> <p>SourceId: {{step.dishInput.sourceId}}</p> <p>Key: {{step.dishInput.key}}</p> <p>Product Name: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/bringtoboilstepinput.html",'<div ng-form="bringToBoilStepForm" class="bg-info"> <b>Bring To Boil Step</b><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" ng-pattern="integerval"><br> Water Amount: <input type="text" ng-model="constructingStep.stepSpecifics[0].val" name="waterAmountInput"><br> Dish Input (Expects a Dish): <step-input-form constructing-step="constructingStep" input-name="dishInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Product Name: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text: <br> <pre>Bring [waterAmount] of water to boil in [dishInput] -- or if no waterAmount -- Bring water to boil in [dishInput]</pre> </div> </div>'),a.put("views/bringtoboilstepitem.html",'<div> <b>Bring To Boil Step</b><br> <p>Step Duration: {{step.stepDuration}}</p> <p>Water Amount: {{step.waterAmount}}</p> <p><b>Dish Input</b></p> <p>SourceType: {{step.dishInput.sourceType}}</p> <p>Key: {{step.dishInput.key}}</p><br> <p>ProductName: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/chapter.html",'<div> <h2>Input Chapter</h2> <a class="btn btn-link active" ng-href="#/chapter">Create</a> <a class="btn btn-link" ng-href="#/editChapter">Edit</a><br> <form novalidate name="chapterForm"> Name: <input type="text" ng-model="chapter.name" size="50" required name="nameInput"><br><br> Description: <textarea ng-model="chapter.description" rows="4" cols="50" required name="descriptionInput"></textarea><br><br> Select Lesson: <select name="lessonSelect" ng-model="selectedLesson" ng-options="lesson.name for lesson in lessons"></select><br><br> <button class="btn btn-sm btn-warning" ng-click="addLesson()">Add Lesson</button><br><br> Added Lesson Ids: <div ng-repeat="id in chapter.lessonIds"> <p>{{id}}</p> <button class="btn btn-xs btn-danger" ng-click="removeLesson($index)">Remove</button> </div> <button class="btn btn-primary btn-lg" ng-click="save()">Save</button> <button class="btn btn-danger btn-lg" ng-click="reset()">Reset</button> </form> <h4>Preview</h4> <pre>{{chapter | json}}</pre> </div>'),a.put("views/contentitem.html",'<div ng-switch on="item.type"> <div ng-switch-when="text"> <p>{{getText()}}</p> <p>--------</p> <div ng-repeat="footnote in getFootnotes()"> <p>{{$index}}: {{footnote.title}}</p> <p>Type: {{footnote.itemType}}</p> <p>Id: {{footnote.id}}</p> </div> </div> <div ng-switch-when="picture"> URL: <span>{{item.url}}</span> Caption: <span>{{item.caption}}</span> </div> <div ng-switch-when="video"> VideoId: <span>{{item.videoId}}</span> End: <span>{{item.end}}</span> Caption: <span>{{item.caption}}</span> </div> <div ng-switch-default></div> </div>'),a.put("views/contentsection.html",'<div ng-form="contentSectionForm" class="bg-success"> Subtitle: <input type="text" ng-model="contentSection.subTitle" name="subTitleInput"><br><br> Content Type: <select name="contentTypeSelect" ng-model="contentType" ng-options="type for type in contentTypes"></select> <div ng-switch on="contentType"> <div ng-switch-when="text"> <!--Needs to be multiple input available here; need to be able to remove/edit individual text chunks--> <textchunk></textchunk><br> <button class="btn btn-default" ng-click="addTextChunk()">Add Text Chunk</button> <p>Text Chunks:</p> <div ng-repeat="textChunk in textChunks"> <div ng-if="!textChunksIndicator[$index]"> <p>{{textChunks[$index].text}}</p> <button class="btn btn-xs btn-info" ng-click="toggleTextChunk($index)">Maximize</button> <button class="btn btn-xs btn-danger" ng-click="removeTextChunk($index)"> Remove </button> </div> <div ng-if="textChunksIndicator[$index]"> <p>Text: {{textChunks[$index].text}}</p> <p>ItemType: {{textChunks[$index].itemType}}</p> <p>Item Title: {{textChunks[$index].linkedItem}} ID: {{textChunks[$index].linkedItem._id}}</p> <button class="btn btn-xs btn-info" ng-click="toggleTextChunk($index)">Minimize</button> <button class="btn btn-xs btn-danger" ng-click="removeTextChunk($index)"> Remove </button> </div> </div> </div> <div ng-switch-when="picture"> URL: <input type="url" ng-model="picture.pictureURL" size="60" name="pictureURLInput" placeholder="URL"><br> Caption: <input type="text" ng-model="picture.pictureCaption" size="100" name="pictureCaptionURLInput" placeholder="Caption"><br><br> </div> <div ng-switch-when="video"> VideoId: <input type="text" ng-model="video.videoId" size="60" name="videoIdInput" placeholder="ID"><br> Video End: <input type="text" ng-model="video.end" size="40" name="videoEndInput" placeholder="End Time"><br> Caption: <input type="text" ng-model="video.videoCaption" size="100" name="videoCaptionURLInput" placeholder="Caption"> </div> <div ng-switch-default></div> </div> <button class="btn btn-primary" ng-click="addContent()">Add Content Piece</button> <div> <p>Content Pieces</p> <div ng-repeat="piece in contentSection.contentArray"> <div ng-show="contentIndicatorArray[$index]"> <contentitem item="piece"></contentitem> <button class="btn btn-xs btn-info" ng-click="toggleContentPiece($index)">Minimize</button> <button class="btn btn-xs btn-danger" ng-click="removeContent($index)">Remove</button> </div> <div ng-show="!contentIndicatorArray[$index]"> <p>Content Type: {{piece.type}}</p> <button class="btn btn-xs btn-info" ng-click="toggleContentPiece($index)">Maximize</button> <button class="btn btn-xs btn-danger" ng-click="removeContent($index)">Remove</button> </div> </div> </div> </div>'),a.put("views/contentsectionitem.html",'<div> <p>Subtitle: {{section.subTitle}}</p> <div ng-repeat="piece in section.contentArray"> <contentitem item="piece"></contentitem> </div> </div>'),a.put("views/cookstepinput.html",'<div ng-form="cookStepForm" class="bg-warning"> <b>Cook Step</b><br> CookType: <select name="cookTypeSelect" ng-model="constructingStep.stepSpecifics[0].val" ng-options="cookType for cookType in cookTypes" required></select><br> Step Duration: <input type="text" ng-change="logStep()" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Cook Duration: <input type="text" ng-model="constructingStep.stepSpecifics[1].val" name="cookDurationInput" size="50"><br> Cook According To Instructions: <input type="checkbox" ng-model="constructingStep.stepSpecifics[2].val"><br> Ingredient Inputs: <step-input-form constructing-step="constructingStep" input-name="ingredientInputs" is-multiple="true" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Dish Input: <step-input-form constructing-step="constructingStep" input-name="dishInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form> <div ng-if="auxStepAdded"> <b>Auxiliary Stir Step:</b><br> <stir-step-input is-aux-step="true" constructing-step="constructingStep" ingredient-list="ingredientList" step-list="stepList" aux-step-arr-index=""></stir-step-input> <button class="btn btn-danger btn-xs" ng-click="removeAuxStep()">Remove Auxiliary Step</button> </div><br><br> Product Name: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text: <br> <pre>Cook the [members of ingredientInput1],..., and [members of ingredientInputN] in the [cookingDish] (with [ingredients in cookingDish]) [accordingToPackageInstructions]/for [cookDuration]</pre> </div> </div>'),a.put("views/cookstepitem.html",'<div> <b>Cook Step</b><br> <p>Cook Type: {{step.cookType}}</p> <p>Step Duration: {{step.stepDuration}}</p> <p>Cook Duration: {{step.cookDuration}}</p> <p>Cook According to Instructions: {{step.cookAccordingToInstructions}}</p> <p><em>Ingredient Inputs</em></p> <div ng-repeat="input in step.ingredientInputs"> <p>SourceType: {{input.sourceType}}</p> <p>SourceId: {{input.sourceId}}</p> <p>Key: {{input.key}}</p> <br> </div> <p><em>Dish Product Input</em></p> <p>SourceType: {{step.dishInput.sourceType}}</p> <p>SourceId: {{step.dishInput.sourceId}}</p> <p>Key: {{step.dishInput.key}}</p> <p>Product Name: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/customstepinput.html",'<div ng-form="customStepForm" class="bg-warning"> <b>Custom Step</b><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Custom Step Text: <textarea name="customTextInput" required ng-model="constructingStep.stepSpecifics[0].val" rows="4" cols="50"></textarea><br> Ingredient Inputs: <step-input-form constructing-step="constructingStep" input-name="ingredientInputs" is-multiple="true" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Dish Inputs: <step-input-form constructing-step="constructingStep" input-name="dishInputs" is-multiple="true" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Product Name: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> </div>'),a.put("views/customstepitem.html",'<div> <b>Custom Step</b><br> <p>Step Duration: {{step.stepDuration}}</p> <p>Custom Step Text: {{step.customStepText}}</p> <p><em>Ingredient Inputs</em></p> <div ng-repeat="input in step.ingredientInputs"> <p>SourceType: {{input.sourceType}}</p> <p>SourceId: {{input.sourceId}}</p> <p>Key: {{input.key}}</p> </div> <p><em>Dish Inputs</em></p> <div ng-repeat="input in step.dishInputs"> <p>SourceType: {{input.sourceType}}</p> <p>SourceId: {{input.sourceId}}</p> <p>Key: {{input.key}}</p> </div> <p>Product Name: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/cutstepinput.html",'<div ng-form="cutStepForm" class="bg-warning"> <b>Cut Step</b><br> CutActionType: <select name="actionTypeSelect" ng-model="constructingStep.stepSpecifics[0].val" ng-options="actionType for actionType in actionTypes" required></select><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Ingredient Input: <step-input-form constructing-step="constructingStep" input-name="cutIngredientInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form> <br> ActionModifier: <input type="text" ng-model="constructingStep.stepSpecifics[1].val" size="50" name="actionModifierInput"><br> ProductName: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"> <br> <div ng-show="showExampleText"> Example Text:<br> <pre>1. [CutActionType] the [first ingredientToCut] [actionModifier]\n    2. [CutActionType] the [second ingredientToCut] [actionModifier] ... </pre> </div> </div>'),a.put("views/cutstepitem.html",'<div> <b>Cut Step</b><br> <p>CutActionType: {{step.actionType}}</p> <p>Step Duration: {{step.stepDuration}}</p> <p><b>Cut Ingredient Input</b></p> <p>SourceType: {{step.cutIngredientInput.sourceType}}</p> <p ng-if="step.cutIngredientInput.sourceId">SourceId: {{step.cutIngredientInput.sourceId}}</p> <p>Key: {{step.cutIngredientInput.key}}</p><br><br> <p>Action Modifier: {{step.actionModifier}}</p> <p>Product Name: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/dailytips.html",'<div> <h2>Input Daily Tips</h2><br> <a class="btn btn-link active" ng-href="#/dailyTips">Create</a> <a class="btn btn-link" ng-href="#/editDailyTips">Edit</a><br> <form novalidate name="dailyTipsForm"> Title: <input type="text" ng-model="dailyTip.title" size="50" required name="titleInput"><br><br> Text: <textarea ng-model="dailyTip.text" rows="4" cols="50" required name="textInput"></textarea><br><br> Picture: <input type="url" ng-model="dailyTip.picture.url" size="60" name="pictureURLInput" placeholder="URL"> <input type="text" ng-model="dailyTip.picture.caption" size="100" name="pictureCaptionInput" placeholder="Caption"><br><br> Video: <input type="text" ng-model="dailyTip.video.videoId" size="60" name="videoIdInput" placeholder="ID"> <input type="text" ng-model="dailyTip.video.end" size="40" name="videoEndInput" placeholder="End Time"> <input type="text" ng-model="dailyTip.video.caption" size="100" name="videoCaptionInput" placeholder="Caption"><br><br> Collections: <select name="itemCollectionSelect" ng-model="curCollectionId" ng-options="collection._id as collection.name for collection in tipCollections"></select><br> <ul> <div ng-repeat="collectionID in dailyTip.collectionIds"> <li>{{collectionID}}</li> <button ng-click="removeCollection($index)">Remove</button> </div> </ul> <button ng-click="addCollection()">Add Collection</button><br><br> <button class="btn btn-large btn-default" ng-click="reset()">Reset Form</button> <button class="btn btn-large btn-success" ng-click="save()" ng-disabled="dailyTipsForm.$invalid || !dailyTipSanityCheck()">Save Tip</button> </form> <pre>\n    {{dailyTip | json}}\n  </pre> </div>'),a.put("views/dishes.html",'<div> <h2>Input Dish</h2> <a class="btn btn-link active" ng-href="#/dishes">Create</a> <a class="btn btn-link" ng-href="#/editDishes">Edit</a><br> <form novalidate name="dishForm"> Name: <input type="text" ng-model="dish.name" size="50" required name="nameInput"><br><br> IngredientCapacity: <input type="text" ng-model="dish.ingredientCapacity" size="30" required name="capacityInput" ng-pattern="integerval"> <span ng-show="dishForm.capacityInput.$invalid">Please enter a number</span><br><br> <input type="button" class="btn btn-md" ng-click="reset()" value="Reset"> <input type="button" class="btn btn-md btn-success" ng-click="save(dish)" value="Save" ng-disabled="dishForm.$invalid"> </form> <br> <h2>Current Dishes</h2> <ul> <li ng-repeat="dish in dishes"> <p><b>Name</b>: {{dish.name}}</p> <p><b>Capacity</b>: {{dish.ingredientCapacity}}</p> </li> </ul> <pre>dish: {{dish | json}}</pre> </div>'),a.put("views/drystepinput.html",'<div ng-form="dryStepForm" class="bg-warning"> <b>Dry Step</b><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Ingredient Input: <step-input-form constructing-step="constructingStep" input-name="ingredientInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Dry Method: <select name="dryMethodSelect" ng-model="constructingStep.stepSpecifics[0].val" ng-options="method for method in dryMethods" required></select><br> ProductName: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text:<br> <pre>[dryMethod] dry the [ingredient1], [ingredient2], and [ingredient3]</pre> </div> </div>'),a.put("views/drystepitem.html",'<div> <b>Dry Step</b> <p>Step Duration: {{step.stepDuration}}</p> <p>Dry Method: {{step.dryMethod}}</p> <p><b>Ingredient Input</b></p> <p>SourceType: {{step.ingredientInput.sourceType}}</p> <p ng-if="step.ingredientInput.sourceId">SourceId: {{step.ingredientInput.sourceId}}</p> <p>Key: {{step.ingredientInput.key}}</p><br> <p>ProductName: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/editarticles.html",'<div> <h2>Edit Article</h2> <a class="btn btn-link" ng-href="#/article">Create</a> <a class="btn btn-link active" ng-href="#/editArticles">Edit</a><br> <form novalidate name="editArticleForm"> Select Article: <select name="articleSelect" ng-model="selectedArticle" ng-change="changeSelectedArticle()" ng-options="article as article.title for article in articles"></select><br> Title: <input type="text" ng-model="article.title" size="50" required name="titleInput"><br><br> <div ng-repeat="contentSection in article.contentSections"> <div ng-if="!isMinimizedContentSection($index)"> <edit-content-section section="contentSection" tips="tips" glossaries="glossaryEntries" howtos="howToShopEntries" trainings="trainingVideos"></edit-content-section> </div> <div ng-if="isMinimizedContentSection($index)"> <p>Section SubTitle: {{contentSection.subTitle}}</p> </div> <button class="btn btn-danger btn-sm" ng-click="removeContentSection($index)">Remove Section</button> <button class="btn btn-warning btn-sm" ng-click="toggleContentSection($index)">{{getContentSectionToggleText($index)}}</button> </div><br><br> <button class="btn btn-warning btn-large" ng-click="cancelChanges()">Cancel Changes</button> <button class="btn btn-primary btn-large" ng-click="saveChanges()">Save Changes</button> <button class="btn btn-danger btn-large" ng-click="deleteArticle()">Delete Article</button> </form> </div>'),a.put("views/editchapter.html",'<div> <h2>Edit Chapter</h2> <a class="btn btn-link" ng-href="#/chapter">Create</a> <a class="btn btn-link active" ng-href="#/editChapter">Edit</a><br> <form novalidate name="editChapterForm"> Select Chapter: <select name="chapterSelect" ng-model="selectedChapter" ng-change="changeSelectedChapter()" ng-options="chapter.name for chapter in chapters"></select><br><br> Name: <input type="text" ng-model="chapter.name" size="50" required name="nameInput"><br><br> Description: <textarea ng-model="chapter.description" rows="4" cols="50" required name="descriptionInput"></textarea><br><br> Select Lesson: <select name="lessonSelect" ng-model="selectedLesson" ng-options="lesson.name for lesson in lessons"></select><br><br> <button class="btn btn-sm btn-warning" ng-click="addLesson()">Add Lesson</button><br><br> Added Lesson Ids: <div ng-repeat="id in chapter.lessonIds"> <p>{{id}}</p> <button class="btn btn-xs btn-danger" ng-click="removeLesson($index)">Remove</button> </div> <button class="btn btn-warning btn-large" ng-click="cancelChanges()">Cancel Changes</button> <button class="btn btn-primary btn-large" ng-click="saveChanges()">Save Changes</button> <button class="btn btn-danger btn-large" ng-click="deleteChapter()">Delete Chapter</button> </form> </div>'),a.put("views/editcontentsection.html",'<div ng-form="editContentSectionForm" class="bg-success"> Subtitle: <input type="text" ng-model="section.subTitle" name="subTitleInput"><br><br> <div ng-repeat="piece in section.contentArray" ng-init="pieceIndex = $index"> Content Type: <select name="contentTypeSelect" ng-model="piece.type" ng-options="type for type in contentTypes"></select> <div ng-if="!contentPieceMinimized($index)"> <div ng-switch on="piece.type"> <div ng-switch-when="text"> <p>Text Chunks</p> <div ng-repeat="textChunk in piece.textChunks" ng-init="chunkIndex = $index"> <div ng-if="!isMinimizedTextChunk(pieceIndex, chunkIndex)"> <textchunk></textchunk> </div> <div ng-if="isMinimizedTextChunk(pieceIndex, chunkIndex)"> <p>Text: {{chunk.text}}</p> </div> <button class="btn btn-danger btn-xs" ng-click="removeTextChunk(pieceIndex, chunkIndex)">Remove</button> <button class="btn btn-warning btn-xs" ng-click="toggleTextChunk(pieceIndex, chunkIndex)">{{getToggleTextChunkText(pieceIndex, chunkIndex)}}</button><br> </div> <button class="btn btn-info btn-sm" ng-click="addTextChunk(pieceIndex)">Add Text Chunk</button> </div> <div ng-switch-when="picture"> URL: <input type="url" ng-model="piece.url" size="60" name="pictureURLInput" placeholder="URL"><br> Caption: <input type="text" ng-model="piece.caption" size="100" name="pictureCaptionURLInput" placeholder="Caption"><br><br> </div> <div ng-switch-when="video"> VideoID: <input type="text" ng-model="piece.videoId" size="50" name="videoIdInput" placeholder="ID"><br> End Time: <input type="text" ng-model="piece.end" size="50" name="videoEndInput" placeholder="End Time"><br> Caption: <input type="text" ng-model="piece.caption" size="100" name="videoCaptionURLInput" placeholder="Caption"> </div> <div ng-switch-default></div> </div> </div> <div ng-if="contentPieceMinimized($index)"> <p>Content Type: {{piece.type}}</p> </div> <button class="btn btn-danger btn-small" ng-click="removeContentPiece(pieceIndex)">Remove Piece</button> <button class="btn btn-warning btn-smalll" ng-click="toggleContentPiece(pieceIndex)">{{getContentPieceToggleText(pieceIndex)}}</button> </div> <button class="btn btn-primary" ng-click="addContentPiece()">Add Content Piece</button> </div>'),
a.put("views/editdailytips.html",'<div> <h2>Edit Daily Tips</h2> <a class="btn btn-link" ng-href="#/dailyTips">Create</a> <a class="btn btn-link active" ng-href="#/editDailyTips">Edit</a><br> <form novalidate name="EditDailyTipsForm"> Select DailyTip: <select name="dailyTipSelect" ng-model="selectedTip" ng-change="changeSelectedTip()" ng-options="tip as tip.title for tip in tips"></select><br><br> Title: <input type="text" ng-model="dailyTip.title" size="50" required name="titleInput"><br><br> Text: <textarea ng-model="dailyTip.text" rows="4" cols="50" required name="textInput"></textarea><br><br> Picture: <input type="url" ng-model="dailyTip.picture.url" size="60" name="pictureURLInput" placeholder="URL"> <input type="text" ng-model="dailyTip.picture.caption" size="100" name="pictureCaptionInput" placeholder="Caption"><br><br> Video: <input type="text" ng-model="dailyTip.video.videoId" size="60" name="videoIdInput" placeholder="URL"> <input type="text" ng-model="dailyTip.video.end" size="40" name="videoEndInput" placeholder="End Time"> <input type="text" ng-model="dailyTip.video.caption" size="100" name="videoCaptionInput" placeholder="Caption"><br><br> Collections: <select name="itemCollectionSelect" ng-model="curCollectionId" ng-options="collection._id as collection.name for collection in tipCollections"></select><br> <ul> <div ng-repeat="collectionID in dailyTip.collectionIds"> <li>{{collectionID}}</li> <button ng-click="removeCollection($index)">Remove</button> </div> </ul> <button ng-click="addCollection()">Add Collection</button><br><br> <button class="btn btn-warning btn-large" ng-click="cancelChanges()">Cancel Changes</button> <button class="btn btn-primary btn-large" ng-click="saveChanges()">Save Changes</button> <button class="btn btn-danger btn-large" ng-click="deleteDailyTip()">Delete DailyTip</button> </form> </div>'),a.put("views/editdishes.html",'<div> <h2>Edit Dishes</h2> <a class="btn btn-link" ng-href="#/dishes">Create</a> <a class="btn btn-link active" ng-href="#/editDishes">Edit</a><br> <form novalidate name="editDishForm"> Select Dish: <select name="dishSelect" ng-model="selectedDish" ng-change="changeSelectedDish()" ng-options="dish as dish.name for dish in dishes"></select><br><br> Name: <input type="text" ng-model="dish.name" size="50" required name="nameInput"><br><br> IngredientCapacity: <input type="text" ng-model="dish.ingredientCapacity" size="30" required name="capacityInput" ng-pattern="integerval"> <span ng-show="dishForm.capacityInput.$invalid">Please enter a number</span><br><br> <button class="btn btn-warning btn-large" ng-click="cancelChanges()">Cancel Changes</button> <button class="btn btn-primary btn-large" ng-click="saveChanges()">Save Changes</button> <button class="btn btn-danger btn-large" ng-click="deleteDish()">Delete Dish</button> </form> </div>'),a.put("views/editglossaryentries.html",'<div> <h2>Edit Glossary Entries</h2> <a class="btn btn-link" ng-href="#/glossaryEntries">Create</a> <a class="btn btn-link active" ng-href="#/editGlossaryEntries">Edit</a><br> <form novalidate name="editGlossaryEntriesForm"> Select Glossary Entry: <select name="glossaryEntrySelect" ng-model="selectedEntry" ng-change="changeSelectedEntry()" ng-options="entry as entry.title for entry in glossaryEntries"></select><br><br> Title: <input type="text" ng-model="entry.title" size="50" required name="titleInput"><br><br> Text: <textarea ng-model="entry.text" rows="4" cols="50" required name="textInput"></textarea><br><br> Picture: <input type="url" ng-model="entry.picture.url" size="60" name="pictureURLInput" placeholder="URL"> <input type="text" ng-model="entry.picture.caption" size="100" name="pictureCaptionInput" placeholder="Caption"><br><br> Video: <input type="text" ng-model="entry.video.videoId" size="60" name="videoIdInput" placeholder="ID"> <input type="text" ng-model="entry.video.end" size="40" name="videoEndInput" placeholder="End Time"> <input type="text" ng-model="entry.video.caption" size="100" name="videoCaptionInput" placeholder="Caption"><br><br> Collections: <select name="itemCollectionSelect" ng-model="curCollectionId" ng-options="collection._id as collection.name for collection in glossaryCollections"></select><br> <ul> <div ng-repeat="collectionID in entry.collectionIds"> <li>{{collectionID}}</li> <button ng-click="removeCollection($index)">Remove</button> </div> </ul> <button ng-click="addCollection()">Add Collection</button><br><br> <button class="btn btn-warning btn-large" ng-click="cancelChanges()">Cancel Changes</button> <button class="btn btn-primary btn-large" ng-click="saveChanges()">Save Changes</button> <button class="btn btn-danger btn-large" ng-click="deleteGlossary()">Delete Entry</button> </form> </div>'),a.put("views/edithowtoshopentries.html",'<div> <h2>Edit HowToShopEntry</h2> <a class="btn btn-link" ng-href="#/howToShopEntry">Create</a> <a class="btn btn-link active" ng-href="#/editHowToShopEntries">Edit</a><br> <form novalidate name="editHowToShopEntryForm"> Select HowToShop Entry: <select name="howToShopEntrySelect" ng-model="selectedEntry" ng-change="changeSelectedEntry()" ng-options="entry as entry.title for entry in howToShopEntries"></select><br><br> Title: <input type="text" ng-model="howToShopEntry.title" size="50" required name="titleInput"><br><br> Text: <textarea ng-model="howToShopEntry.text" rows="4" cols="50" required name="textInput"></textarea><br><br> Pictures: <div ng-repeat="picture in howToShopEntry.pictures"> <input type="url" ng-model="picture.url" size="60" placeholder="URL"> <input type="text" ng-model="picture.caption" size="100" placeholder="Caption"> <button class="btn btn-sm btn-warning" ng-click="removePicture($index)">Remove Picture</button> </div> <button class="btn btn-info" ng-click="addPicture()">Add a Picture</button> <br><br> Collections: <select name="itemCollectionSelect" ng-model="curCollectionId" ng-options="collection._id as collection.name for collection in howToShopCollections"></select><br> <ul> <div ng-repeat="collectionID in howToShopEntry.collectionIds"> <li>{{collectionID}}</li> <button ng-click="removeCollection($index)">Remove</button> </div> </ul> <button ng-click="addCollection()">Add Collection</button><br><br> <button class="btn btn-large btn-warning" ng-click="cancelChanges()">Cancel Changes</button> <button class="btn btn-large btn-primary" ng-click="saveChanges()">Save Changes</button> <button class="btn btn-large btn-danger" ng-click="deleteEntry()">Delete Entry</button> </form> </div>'),a.put("views/editingredients.html",'<div> <h2>Edit Ingredients</h2> <a class="btn btn-link active" ng-href="#/ingredients">Create</a> <a class="btn btn-link" ng-href="#/editIngredients">Edit</a><br> <form novalidate name="editIngredientForm" ng-controller="EditIngredientsCtrl"> Select Ingredient: <select name="ingredientSelect" ng-model="selectedIngredient" ng-change="changeSelectedIngredient()" ng-options="ingredient as ingredient.name.standardForm for ingredient in ingredients"></select><br><br> Name: <input type="text" ng-model="ingredient.name.standardForm" size="50" required name="nameInput"><br><br> Input Category: <select name="inputCategorySelect" ng-model="ingredient.inputCategory" ng-options="category for category in inputCategories" ng-change="changeInputCategory()" ng-init="changeInputCategory()" required></select><br><br> Input SubCategory: <select name="inputSubCategorySelect" ng-model="ingredient.inputSubCategory" ng-options="subCategory for subCategory in inputSubCategories"></select><br><br> Plural Name: <input type="text" ng-model="ingredient.name.pluralForm" size="50" required name="pluralFormInput"><br> Singular Name: <input type="text" ng-model="ingredient.name.singularForm" size="50" required name="singularFormInput"><br><br> Measuring Units: <input type="text" ng-model="ingredient.units" size="50" required name="unitsInput"><br><br> Unit is A Single Item: <input type="checkbox" ng-model="ingredient.unitIsASingleItem" name="unitsCheckbox"><br><br> Servings Per Unit: <input type="text" ng-model="ingredient.servingsPerUnit" size="50" required name="servingsPerUnitInput" ng-pattern="integerval"><br><br> Use Ingredient Form Name For Display: <input type="checkbox" ng-model="ingredient.useFormNameForDisplay"><br><br> Ingredient Forms: <br> <div ng-repeat="form in ingredient.ingredientForms" class="bg-info" ng-form="ingredientFormForm"> <div ng-if="!isIngredientFormMinimized($index)"> <ul> <li> Name: <input type="text" ng-model="form.name" size="50" required name="formName"> </li> <li> Cooking Times: <br> <div ng-repeat="time in form.cookingTimes" class="bg-info" ng-form="cookingForm"> Cooking Method: <select name="cookingMethods" ng-model="time.cookingMethod" required> <option value="">Select Cooking Method</option> <option ng-repeat="method in cookingMethods">{{method}}</option> </select> <span ng-show="cookingForm.cookingMethods.$invalid">select a cooking method</span><br> Min Cook Time: <input type="text" ng-model="time.minTime" size="30" required name="minTime" ng-pattern="integerval"> Max Cook Time: <input type="text" ng-model="time.maxTime" size="30" required name="maxTime" ng-pattern="integerval"> <span ng-show="cookingForm.minTime.$invalid || cookingForm.maxTime.$invalid">Please enter a number</span> <br> Times Per Side?: <input type="checkbox" ng-model="time.timesArePerSide"><br> <button ng-click="removeCookingTime(form, $index)" class="btn btn-link btn-xs">Remove Cooking Time</button> <br><br> </div> </li> <button ng-click="addCookingTime(form)" class="btn btn-primary btn-xs">Add Cooking Time</button> </ul> </div> <div ng-if="isIngredientFormMinimized($index)"> <p>{{form.name}}</p> </div> <button ng-click="removeIngredientForm($index)" class="btn btn-danger btn-sm">Remove Ingredient Form</button> <button ng-click="toggleIngredientForm($index)" class="btn btn-warning btn-sm">{{getIngredientFormVisibilityText($index)}}</button><br><br> </div> <button ng-click="addIngredientForm()" class="btn btn-warning btn-sm">Add IngredientForm</button><br><br> Ingredient Tips: <br> <div ng-repeat="tip in ingredient.ingredientTips" class="bg-info" ng-form name="tipForm"> <div ng-if="!isIngredientTipMinimized($index)"> <ul> <li> StepType: <select name="stepTypeSelect" ng-model="tip.stepType" ng-change="setSubTypes(tip.stepType, $index)" required> <option value="">Select StepType</option> <option ng-repeat="stepType in stepTypes">{{stepType}}</option> </select> StepSubType: <select name="stepSubTypeSelect" ng-model="tip.stepSubType" ng-options="stepSubType for stepSubType in subTypes[$index]" required> </select> </li> <li> Step Tip: <br> <div class="bg-warning"> Title: <input type="text" ng-model="tip.stepTip.title" size="50" name="tipTitle"><br> Text: <textarea ng-model="tip.stepTip.text" rows="4" cols="50" name="tipText"></textarea><br> <span ng-show="tipForm.tipText.$invalid">Must enter text for the tip</span><br> PictureURL: <input type="url" ng-model="tip.stepTip.pictureURL" name="tipPic" size="70"> <br> <span ng-show="tipForm.tipPic.$invalid">PictureURL must be a URL</span><br> VideoTitle: <input type="text" ng-model="tip.stepTip.videoTitle" size="50" name="tipVidTitle"><br> VideoInfo: <input type="text" ng-model="tip.stepTip.videoInfo.videoId" name="tipVidId" placeholder="ID" size="50"> <input type="text" ng-model="tip.stepTip.videoInfo.end" name="tipVidEnd" placeholder="End Time" size="50"><br> <span ng-show="tipForm.tipVid.$invalid">VideoURL must be a URL</span><br> </div> </li> </ul> </div> <div ng-if="isIngredientTipMinimized($index)"> <p>Title: {{tip.title}} // VideoTitle: {{tip.stepTip.videoTitle}} // StepType: {{tip.stepType}} // subType: {{tip.stepSubType}}</p> </div> <button ng-click="toggleTip($index)" class="btn btn-warning btn-sm">{{getTipVisibilityText($index)}}</button> <button ng-click="removeTip($index)" class="btn btn-danger btn-sm">Remove Tip</button> </div> <button class="btn btn-warning btn-sm" ng-click="addIngredientTip()">Add Ingredient Tip</button><br><br> <button class="btn btn-large btn-warning" ng-click="cancelChanges()">Cancel Changes</button> <button class="btn btn-large btn-primary" ng-click="saveChanges()">Save Changes</button> <button class="btn btn-large btn-danger" ng-click="deleteIngredient()">Delete Ingredient</button> </form> </div>'),a.put("views/edititemcollections.html",'<div> <h2>Edit Item Collections</h2> <a class="btn btn-link" ng-href="#/itemCollections">Create</a> <a class="btn btn-link active" ng-href="#/editItemCollections">Edit</a><br> <form novalidate name="editItemCollectionForm"> Select Collection: <select name="itemCollectionSelect" ng-model="selectedCollection" ng-change="changeSelectedCollection()" ng-options="collection as collection.displayName for collection in collections"></select><br><br> Name: <input type="text" ng-model="itemCollection.name" size="50" required name="nameInput"><br><br> Description: <textarea ng-model="itemCollection.description" rows="4" cols="50" required name="descriptionInput"></textarea><br><br> ItemType: <select name="itemTypeSelect" ng-model="itemCollection.itemType" ng-options="itemType as itemType for itemType in itemTypes" required></select><br><br> <button class="btn btn-warning btn-large" ng-click="cancelChanges()">Cancel Changes</button> <button class="btn btn-primary btn-large" ng-click="saveChanges()">Save Changes</button> <button class="btn btn-danger btn-large" ng-click="deleteCollection()">Delete Collection</button> </form> </div>'),a.put("views/editlessons.html",'<div> <h2>Edit Lessons</h2> <a class="btn btn-link" ng-href="#/lesson">Create</a> <a class="btn btn-link active" ng-href="#/editLessons">Edit</a><br> <form novalidate name="editLessonsForm" ng-controller="EditLessonsCtrl"> Select Lesson: <select name="lessonSelect" ng-model="selectedLesson" ng-change="changeSelectedLesson()" ng-options="lesson as lesson.name for lesson in lessons"></select><br> Name: <input type="text" ng-model="lesson.name" size="50" required name="nameInput"><br><br> Time Estimate (minutes): <input type="text" ng-model="lesson.timeEstimate" size="50" required name="timeEstimateInput"> <br><br> Description: <textarea ng-model="lesson.description" rows="4" cols="50" required name="descriptionInput"></textarea><br><br> Is Article? <input type="checkbox" ng-model="lesson.isArticle"><br><br> <s ng-show="!getArticleLabel()">Article:</s> <span ng-show="getArticleLabel()">Article:</span> <select ng-disabled="!lesson.isArticle" name="articleSelect" ng-model="lesson.articleId" ng-options="article._id as article.title for article in articles"></select><br><br> <s ng-show="!getItemLabel()">Item Type:</s> <span ng-show="getItemLabel()">Item Type:</span> <select ng-disabled="lesson.isArticle" name="itemTypeSelect" ng-model="itemType" ng-options="itemType for itemType in itemTypes"></select><br><br> <s ng-show="!getItemLabel()">Item:</s> <span ng-show="getItemLabel()">Item:</span> <select ng-disabled="lesson.isArticle" name="itemSelect" ng-model="selectedItem" ng-options="item._id as item.title for item in getSelectedTypeItems()"></select><br><br> <button ng-disabled="lesson.isArticle || !selectedItem" ng-click="addItem()">Add Item</button><br><br> <button class="btn btn-success btn-sm" ng-click="addAllOfItemType()" ng-disabled="!canAddAllForItemType()">Add All For Item Type</button><br><br> Added Items: <div ng-repeat="id in lesson.itemIds"> <p>{{id.itemType}}: {{id.id}}</p> <button class="btn btn-xs btn-danger" ng-click="removeItemId($index)">Remove</button> </div> <button class="btn btn-warning btn-lg" ng-click="cancelChanges()">Cancel Changes</button> <button class="btn btn-primary btn-lg" ng-click="saveChanges()">Save Changes</button> <button class="btn btn-danger btn-lg" ng-click="deleteLesson()">Delete Lesson</button> </form> </div>'),a.put("views/editrecipes.html",'<div> <h2>Edit Recipe</h2> <a class="btn btn-link active" ng-href="#/recipes">Create</a> <a class="btn btn-link" ng-href="#/editRecipes">Edit + Duplicate</a><br> <!--copy selectedRecipe over to recipe - that way original model doesn\'t change--> <button class="btn btn-sm btn-warning" ng-click="reloadRecipes()">Reload Recipes</button> <form novalidate name="editRecipeForm" ng-controller="EditRecipesCtrl"> Select Recipe: <select name="recipeSelect" ng-model="selectedRecipe" ng-change="changeSelectedRecipe()" ng-options="recipe.value as recipe.label for recipe in recipes"></select><br><br> Name: <input type="text" ng-model="recipe.name" size="50" required ng-focus="logRecipeName()" ng-blur="updateRecipeName()" name="nameInput"> <span ng-show="recipeForm.nameInput.$invalid">give the recipe a name</span><br> <br> Description: <textarea ng-model="recipe.description" rows="4" cols="50" required name="descInput"></textarea> <span ng-show="recipeForm.descInput.$invalid">give the recipe a description</span><br> Collections: <br> <div ng-repeat="collection in recipeCollections"> <input type="checkbox" ng-model="collection.useInRecipe"> <span>{{collection.name}}</span> </div><br><br> Main Picture URL: <input type="url" ng-model="recipe.mainPictureURL" size="70" name="mainPicInput" required><br> Main Video: <input type="text" ng-model="recipe.mainVideo.videoId" size="50" name="mainVidIdInput" placeholder="Video Id"> <input type="text" ng-model="recipe.mainVideo.end" size="50" name="mainVidEndInput" placeholder="End Time"><br><br> RecipeType: <select name="typeSelect" ng-model="recipe.recipeType" ng-options="recipeType for recipeType in recipeTypes" required></select> <span ng-show="recipeForm.typeSelect.$invalid">select a recipe type</span><br><br> RecipeCategory: <select name="categorySelect" ng-model="recipe.recipeCategory" ng-options="recipeCategory for recipeCategory in recipeCategories" required></select> <span ng-show="recipeForm.categorySelect.$invalid">select a recipe category</span><br><br> Active Time: <input type="text" ng-pattern="integerval" ng-model="recipe.manActiveTime"><br><br> Total Time: <input type="text" ng-pattern="integerval" ng-model="recipe.manTotalTime"><br><br> Default Serving Size: <select name="servingSizeSelect" ng-model="recipe.defaultServingSize" ng-options="size for size in servingSizes" required></select><br> Primary Cooking Method: <select name="primaryCookingSelect" ng-model="recipe.primaryCookingMethod" ng-options="method for method in cookingMethods" required></select><br> <span ng-show="recipeForm.primaryCookingSelect.$invalid">select a cooking method</span> Other Cooking Methods: <select name="otherCookingSelect" ng-options="method for method in cookingMethods" ng-model="otherCookingMethod"></select> <button class="btn btn-info btn-xs" ng-click="addCookingMethod()">Add Secondary Cooking Method</button> <div ng-repeat="method in recipe.otherCookingMethods"> {{method}} <button class="btn btn-danger btn-xs" ng-click="removeCookingMethod($index)"> - </button> </div><br><br> Can Add Seasoning: <input type="checkbox" ng-model="recipe.canAddSeasoningProfile"><br><br> Default Seasoning: <select name="seasoningSelect" ng-model="recipe.defaultSeasoningProfile" ng-options="profile as profile.name for profile in seasoningProfiles track by profile._id" ng-disabled="!recipe.canAddSeasoningProfile"></select><br><br> Available Seasonings: <br> <div ng-repeat="profile in seasoningProfiles" ng-if="recipe.canAddSeasoningProfile"> <input type="checkbox" ng-model="profile.useInChoiceSeasonings"> <span>{{profile.name}}</span> </div> <h4>Ingredient List</h4> <b>Ingredient Types</b><br><br> <div ng-repeat="type in recipe.ingredientList.ingredientTypes" class="bg-warning"> <div ng-if="!isIngredientTypeMinimized($index)"> TypeName: <input type="text" ng-model="type.typeName" size="50" required name="typeNameInput"> <span ng-show="typeForm.typeName.$invalid">give a type name</span><br><br> DisplayName: <input type="text" ng-model="type.displayName" size="50" required name="displayNameInput"> <span ng-show="typeForm.displayName.$invalid">give a display name</span><br><br> Min Ingredients Needed: <input type="text" ng-model="type.minNeeded" size="30" required name="minNeeded" ng-pattern="integerval"> <span ng-show="typeForm.minNeeded.$invalid">give a number for minNeeded</span><br><br> Ingredients: <select name="ingredientSelect" ng-model="typeIngredient" ng-options="ingredient.name.standardForm for ingredient in ingredients" ng-init="setSelectedIngredientForms(typeIngredient)" ng-change="setSelectedIngredientForms(typeIngredient)"></select> <span ng-show="type.ingredients.length === 0">there must be at least one ingredient in a type</span> <div ng-repeat="form in typeIngredient.ingredientForms"> {{form.name}}: <input type="checkbox" ng-model="selectedIngredientForms[$index]"> </div> <br> <button class="btn btn-primary btn-xs" ng-click="addTypeIngredient($index, typeIngredient)" ng-disabled="!isAFormSelected()">Add Ingredient</button><br> <div ng-repeat="ingredient in type.ingredients"> <div ng-if="isIngredientMinimized(type, $index)"> <p>{{ingredient.name}}</p> <button class="btn btn-info btn-xs" ng-click="toggleIngredientExpand(type, $index)">Expand</button> <button class="btn btn-danger btn-xs" ng-click="removeTypeIngredient(type, $index)">Remove</button> </div> <div ng-if="!isIngredientMinimized(type, $index)"> <pre>{{ingredient | json}}</pre> <button class="btn btn-info btn-xs" ng-click="toggleIngredientExpand(type, $index)">Minimize</button> <button class="btn btn-danger btn-xs" ng-click="removeTypeIngredient(type, $index)">Remove</button> </div> </div> <button class="btn btn-info btn-sm" ng-click="toggleIngredientTypeExpand($index)">Minimize</button> <button class="btn btn-danger btn-sm" ng-click="removeIngredientType($index)">Remove Ingredient Type</button><br><br> </div> <div ng-if="isIngredientTypeMinimized($index)"> <p>Type Name: {{type.typeName}} // MinNeeded: {{type.minNeeded}}</p> <button class="btn btn-info btn-sm" ng-click="toggleIngredientTypeExpand($index)">Expand</button> <button class="btn btn-danger btn-sm" ng-click="removeIngredientType($index)">Remove Ingredient Type</button><br><br> </div> </div> <button class="btn btn-primary btn-sm" ng-click="addIngredientType()">Add Ingredient Type</button><br><br> <b>Equipment Needed</b><br> <select name="equipmentSelect" ng-model="typeDish" ng-options="dish.name for dish in dishes"></select> <button class="btn btn-primary btn-xs" ng-click="addDish()">Add Dish</button> <div ng-repeat="dish in recipe.ingredientList.equipmentNeeded"> <pre>{{dish.name}}</pre><button class="btn btn-danger btn-xs" ng-click="removeDish($index)"> - </button> </div><br> Primary Ingredient Type: <select name="primaryIngredientTypeSelect" ng-model="recipe.primaryIngredientType" ng-options="type.typeName as type.typeName for type in recipe.ingredientList.ingredientTypes" required></select><br><br> <h4>Step List</h4> <div ng-form="stepForm"> <div ng-repeat="constructingStep in recipe.stepList"> <div ng-if="!isMinimizedStep($index)"> <cut-step-input ng-if="constructingStep.stepType === \'Cut\'"></cut-step-input> <cook-step-input ng-if="constructingStep.stepType === \'Cook\'"></cook-step-input> <bake-step-input ng-if="constructingStep.stepType === \'Bake\'"></bake-step-input> <boil-step-input ng-if="constructingStep.stepType === \'Boil\'"></boil-step-input> <bring-to-boil-step-input ng-if="constructingStep.stepType === \'BringToBoil\'"></bring-to-boil-step-input> <custom-step-input ng-if="constructingStep.stepType === \'Custom\'"></custom-step-input> <dry-step-input ng-if="constructingStep.stepType === \'Dry\'"></dry-step-input> <heat-step-input ng-if="constructingStep.stepType === \'Heat\'"></heat-step-input> <place-step-input ng-if="constructingStep.stepType === \'Place\'"></place-step-input> <preheat-oven-step-input ng-if="constructingStep.stepType === \'PreheatOven\'"></preheat-oven-step-input> <sautee-step-input ng-if="constructingStep.stepType === \'Sautee\'"></sautee-step-input> <season-step-input ng-if="constructingStep.stepType === \'Season\'"></season-step-input> <slow-cook-step-input ng-if="constructingStep.stepType === \'SlowCook\'"></slow-cook-step-input> <steam-step-input ng-if="constructingStep.stepType === \'Steam\'"></steam-step-input> <stir-step-input ng-if="constructingStep.stepType === \'Stir\'" is-aux-step="false" constructing-step="constructingStep" ingredient-list="recipe.ingredientList" steplist="recipe.stepList" aux-step-arr-index=""></stir-step-input> <equipment-prep-step-input ng-if="constructingStep.stepType === \'EquipmentPrep\'"></equipment-prep-step-input> </div> <div ng-if="isMinimizedStep($index)"> <p>{{constructingStep.stepType}}</p> </div> <button class="btn btn-sm btn-info" ng-click="toggleStepMinimize($index)">{{getStepMinimizeButtonText($index)}}</button> <button class="btn btn-sm btn-danger" ng-click="removeStep($index)">Remove (use with caution!)</button> <br><br> </div> <b>Add New Step: </b><br><br> <div ng-form="newStepForm"> StepType <select name="stepTypeSelect" ng-model="constructingStep.stepType" ng-options="stepType for stepType in stepTypes" ng-required="!recipeSanityCheck()"></select> <cut-step-input ng-if="constructingStep.stepType === \'Cut\'"></cut-step-input> <cook-step-input ng-if="constructingStep.stepType === \'Cook\'"></cook-step-input> <bake-step-input ng-if="constructingStep.stepType === \'Bake\'"></bake-step-input> <boil-step-input ng-if="constructingStep.stepType === \'Boil\'"></boil-step-input> <bring-to-boil-step-input ng-if="constructingStep.stepType === \'BringToBoil\'"></bring-to-boil-step-input> <custom-step-input ng-if="constructingStep.stepType === \'Custom\'"></custom-step-input> <dry-step-input ng-if="constructingStep.stepType === \'Dry\'"></dry-step-input> <heat-step-input ng-if="constructingStep.stepType === \'Heat\'"></heat-step-input> <place-step-input ng-if="constructingStep.stepType === \'Place\'"></place-step-input> <preheat-oven-step-input ng-if="constructingStep.stepType === \'PreheatOven\'"></preheat-oven-step-input> <sautee-step-input ng-if="constructingStep.stepType === \'Sautee\'"></sautee-step-input> <season-step-input ng-if="constructingStep.stepType === \'Season\'"></season-step-input> <slow-cook-step-input ng-if="constructingStep.stepType === \'SlowCook\'"></slow-cook-step-input> <steam-step-input ng-if="constructingStep.stepType === \'Steam\'"></steam-step-input> <stir-step-input ng-if="constructingStep.stepType === \'Stir\'" is-aux-step="false" constructing-step="constructingStep" ingredient-list="ingredientList" steplist="stepList" aux-step-arr-index=""></stir-step-input> <equipment-prep-step-input ng-if="constructingStep.stepType === \'EquipmentPrep\'"></equipment-prep-step-input> <br><br> </div> <button ng-disabled="newStepForm.$invalid" ng-click="addStep()" class="btn btn-default">Append Step</button> </div> <button class="btn btn-large btn-success" ng-disabled="noRecipeNameChange()" ng-click="duplicateRecipe()">Duplicate Recipe</button> <button class="btn btn-large btn-warning" ng-click="cancelChanges()">Cancel Changes</button> <button class="btn btn-large btn-primary" ng-click="saveChanges()">Save Changes</button> <button class="btn btn-large btn-danger" ng-click="deleteRecipe()">Delete Recipe</button> </form> </div>'),a.put("views/editseasoningprofiles.html",'<div> <h2>Edit Seasoning Profile</h2> <a class="btn btn-link" ng-href="#/seasoningprofiles">Create</a> <a class="btn btn-link active" ng-href="#/editSeasoningProfiles">Edit</a><br> <form novalidate name="editSeasoningForm"> Select Seasoning Profile: <select name="seasoningSelect" ng-model="selectedSeasoning" ng-change="changeSelectedSeasoning()" ng-options="seasoning as seasoning.name for seasoning in seasonings"></select><br><br> Name: <input type="text" ng-model="seasoningProfile.name" size="50" required name="nameInput"><br><br> Spices: <ul> <li ng-repeat="spice in seasoningProfile.spices track by $index"> <input type="text" ng-model="seasoningProfile.spices[$index]" size="40"> <button class="btn btn-xs btn-danger" ng-click="removeSpice($index)">Remove Spice</button> </li> </ul> <button class="btn btn-sm btn-primary" ng-click="addSpice()">Add Spice</button><br><br> <button class="btn btn-large btn-warning" ng-click="cancelChanges()">Cancel Changes</button> <button class="btn btn-large btn-primary" ng-click="saveChanges()">Save Changes</button> <button class="btn btn-large btn-danger" ng-click="deleteSeasoningProfile()">Delete Seasoning Profile</button> </form> </div>'),a.put("views/edittrainingvideos.html",'<div> <h2>Edit Training Videos</h2> <a class="btn btn-link" ng-href="#/trainingVideos">Create</a> <a class="btn btn-link active" ng-href="#/editTrainingVideos">Edit</a><br> <form novalidate name="trainingVideoForm"> Select Training Video: <select name="trainingVideoSelect" ng-model="selectedVideo" ng-change="changeSelectedVideo()" ng-options="video as video.title for video in videos"></select><br><br> Title: <input type="text" ng-model="trainingVideo.title" size="50" required name="titleInput"><br><br> Video: <input type="text" ng-model="trainingVideo.video.videoId" size="60" name="videoIdInput" placeholder="ID"> <input type="text" ng-model="trainingVideo.video.end" size="40" name="videoEndInput" placeholder="End Time"> <input type="text" ng-model="trainingVideo.video.caption" size="100" name="videoCaptionInput" placeholder="Caption"><br><br> Picture: <input type="url" ng-model="trainingVideo.picture.url" size="60" name="pictureURLInput" placeholder="URL"> <input type="text" ng-model="trainingVideo.picture.caption" size="100" name="pictureCaptionInput" placeholder="Caption"><br><br> Collections: <select name="itemCollectionSelect" ng-model="curCollectionId" ng-options="collection._id as collection.name for collection in trainingVideoCollections"></select><br> <ul> <div ng-repeat="collectionID in trainingVideo.collectionIds"> <li>{{collectionID}}</li> <button ng-click="removeCollection($index)">Remove</button> </div> </ul> <button ng-click="addCollection()">Add Collection</button><br><br> <button class="btn btn-large btn-warning" ng-click="cancelChanges()">Cancel Changes</button> <button class="btn btn-large btn-primary" ng-click="saveChanges()">Save Changes</button> <button class="btn btn-large btn-danger" ng-click="deleteVideo()">Delete Video</button> </form> </div>'),a.put("views/equipmentprepstepinput.html",'<div ng-form="equipmentPrepStepForm" class="bg-warning"> <b>Equipment Prep Step</b><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Prep Action: <select name="prepActionSelect" ng-model="constructingStep.stepSpecifics[0].val" ng-options="prepAction for prepAction in prepActionTypes" required></select> Prep Modifier: <input type="text" ng-model="constructingStep.stepSpecifics[1].val" name="prepModifierInput" size="50"><br> Dish Inputs (expects dish): <step-input-form constructing-step="constructingStep" input-name="dishInputs" is-multiple="true" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> ProductName: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text:<br> <pre>[prepActionType] [# of dishes] [dishesToPrep] with [prepModifier]</pre> </div> </div>'),
a.put("views/equipmentprepstepitem.html",'<div> <b>Equipment Prep Step</b><br> <p>Step Duration: {{step.stepDuration}}</p> <p>PrepActionType: {{step.prepActionType}}</p> <p>Prep Modifier: {{step.prepModifier}}</p> <p><em>Dish Inputs</em></p> <div ng-repeat="input in step.dishInputs"> <p>SourceType: {{input.sourceType}}</p> <p>SourceId: {{input.sourceId}}</p> <p>Key: {{input.key}}</p> </div> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/glossaryentries.html",'<div> <h2>Input Glossary Entries</h2><br> <a class="btn btn-link" ng-href="#/glossaryEntries">Create</a> <a class="btn btn-link active" ng-href="#/editGlossaryEntries">Edit</a><br> <form novalidate name="glossaryEntryForm"> Title: <input type="text" ng-model="glossaryEntry.title" size="50" required name="titleInput"><br><br> Text: <textarea ng-model="glossaryEntry.text" rows="4" cols="50" required name="textInput"></textarea><br><br> Picture: <input type="url" ng-model="glossaryEntry.picture.url" size="60" name="pictureURLInput" placeholder="URL"> <input type="text" ng-model="glossaryEntry.picture.caption" size="100" name="pictureCaptionInput" placeholder="Caption"><br><br> Video: <input type="text" ng-model="glossaryEntry.video.videoId" size="60" name="videoIdInput" placeholder="ID"> <input type="text" ng-model="glossaryEntry.video.end" size="40" name="videoEndInput" placeholder="End Time"> <input type="text" ng-model="glossaryEntry.video.caption" size="100" name="videoCaptionInput" placeholder="Caption"><br><br> Collections: <select name="itemCollectionSelect" ng-model="curCollectionId" ng-options="collection._id as collection.name for collection in glossaryCollections"></select><br> <ul> <div ng-repeat="collectionID in glossaryEntry.collectionIds"> <li>{{collectionID}}</li> <button ng-click="removeCollection($index)">Remove</button> </div> </ul> <button ng-click="addCollection()">Add Collection</button><br><br> <button class="btn btn-large btn-default" ng-click="reset()">Reset Form</button> <button class="btn btn-large btn-success" ng-click="save()" ng-disabled="glossaryEntryForm.$invalid || !glossaryEntrySanityCheck()">Save Entry</button> </form> <pre>\n    {{glossaryEntry | json}}\n  </pre> </div>'),a.put("views/heatstepinput.html",'<div ng-form="heatStepForm" class="bg-warning"> <b>Heat Step</b><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"> <br> Heats Oil: <input type="checkbox" ng-model="constructingStep.stepSpecifics[0].val" name="heatsOilInput"><br> Heat Setting: <input type="text" ng-model="constructingStep.stepSpecifics[1].val" size="50" required name="heatSettingInput"><br> Dish Input (Expects a Dish): <step-input-form constructing-step="constructingStep" input-name="dishInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> ProductName: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text:<br> <pre>if not heatsOil: Heat [dishInput] over [heatSetting] heat --- if heatsOil: Add oil to [dishInput] and then heat it over [heatSetting] heat</pre> </div> </div>'),a.put("views/heatstepitem.html",'<div> <b>Heat Step</b> <p>Step Duration: {{step.stepDuration}}</p> <p>Heats Oil: {{step.heatsOil}}</p> <p>Heat Setting: {{step.heatsOil}}</p> <p><b>Dish Input</b></p> <p>SourceType: {{step.dishInput.sourceType}}</p> <p ng-if="step.ingredientInput.sourceId">SourceId: {{step.dishInput.sourceId}}</p> <p>Key: {{step.dishInput.key}}</p><br> <p>ProductName: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/howtoshopentry.html",'<div> <h2>Input How To Shop Entry</h2> <a class="btn btn-link active" ng-href="#/howToShopEntry">Create</a> <a class="btn btn-link" ng-href="#/editHowToShopEntries">Edit</a><br> <form novalidate name="howToShopEntryForm"> Title: <input type="text" ng-model="howToShopEntry.title" size="50" required name="titleInput"><br><br> Text: <textarea ng-model="howToShopEntry.text" rows="4" cols="50" required name="textInput"></textarea><br><br> Pictures: <div ng-repeat="picture in howToShopEntry.pictures"> <input type="url" ng-model="picture.url" size="60" placeholder="URL"> <input type="text" ng-model="picture.caption" size="100" placeholder="Caption"> <button class="btn btn-sm btn-warning" ng-click="removePicture($index)">Remove Picture</button> </div> <button class="btn btn-info" ng-click="addPicture()">Add a Picture</button> <br><br> Collections: <select name="itemCollectionSelect" ng-model="curCollectionId" ng-options="collection._id as collection.name for collection in howToShopCollections"></select><br> <ul> <div ng-repeat="collectionID in howToShopEntry.collectionIds"> <li>{{collectionID}}</li> <button ng-click="removeCollection($index)">Remove</button> </div> </ul> <button ng-click="addCollection()">Add Collection</button><br><br> <button class="btn btn-large btn-default" ng-click="reset()">Reset Form</button> <button class="btn btn-large btn-success" ng-click="save()" ng-disabled="howToShopEntryForm.$invalid || !howToShopEntrySanityCheck()">Save Entry</button> </form> <pre>\n    {{howToShopEntry | json}}\n  </pre> </div>'),a.put("views/ingredients.html",'<div> <h2>Input Ingredient</h2> <a class="btn btn-link active" ng-href="#/ingredients">Create</a> <a class="btn btn-link" ng-href="#/editIngredients">Edit</a><br> <form novalidate name="ingredientForm"> Name: <input type="text" ng-model="ingredient.name.standardForm" size="50" required name="nameInput"><br><br> Input Category: <select name="inputCategorySelect" ng-model="ingredient.inputCategory" ng-options="category for category in inputCategories" ng-change="changeInputCategory()" ng-init="changeInputCategory()" required></select><br><br> Input SubCategory: <select name="inputSubCategorySelect" ng-model="ingredient.inputSubCategory" ng-options="subCategory for subCategory in inputSubCategories"></select><br><br> Plural Name: <input type="text" ng-model="ingredient.name.pluralForm" size="50" required name="pluralFormInput"><br> Singular Name: <input type="text" ng-model="ingredient.name.singularForm" size="50" required name="singularFormInput"><br><br> Measuring Units: <input type="text" ng-model="ingredient.units" size="50" required name="unitsInput"><br><br> Unit is A Single Item: <input type="checkbox" ng-model="ingredient.unitIsASingleItem" name="unitsCheckbox"><br><br> Servings Per Unit: <input type="text" ng-model="ingredient.servingsPerUnit" size="50" required name="servingsPerUnitInput" ng-pattern="integerval"><br><br> Use Ingredient Form Name For Display: <input type="checkbox" ng-model="ingredient.useFormNameForDisplay"><br><br> Ingredient Forms: <br> <div ng-repeat="inForm in inForms" class="bg-warning" ng-form="formForm"> <ul> <li> Name: <input type="text" ng-model="inForm.name" size="50" required name="inFormName"> </li> <li> Cooking Times: <br> <div ng-repeat="time in inForm.cookingTimes" class="bg-info" ng-form="cookingForm"> Cooking Method: <select name="cookingMethods" ng-model="time.cookingMethod" required> <option value="">Select Cooking Method</option> <option ng-repeat="method in cookingMethods">{{method}}</option> </select> <span ng-show="cookingForm.cookingMethods.$invalid">select a cooking method</span><br> Min Cook Time: <input type="text" ng-model="time.minTime" size="30" required name="minTime" ng-pattern="integerval"> Max Cook Time: <input type="text" ng-model="time.maxTime" size="30" required name="maxTime" ng-pattern="integerval"> <span ng-show="cookingForm.minTime.$invalid || cookingForm.maxTime.$invalid">Please enter a number</span> <br> Times Per Side?: <input type="checkbox" ng-model="time.timesArePerSide"><br> <button ng-click="removeCookingTime(inForm, $index)" class="btn btn-link btn-xs">Remove Cooking Time</button> <br><br> </div> </li> <button ng-click="addCookingTime(inForm)" class="btn btn-primary btn-xs">Add Cooking Time</button> <button ng-click="removeIngredientForm($index)" class="btn btn-danger btn-xs">Remove Ingredient Form</button> </ul> </div> <button ng-click="addIngredientForm()" class="btn btn-warning btn-sm">Add IngredientForm</button><br><br> Ingredient Tips: <br> <div ng-repeat="tip in ingredientTips" class="bg-info" ng-form="tipForm"> <ul> <li> StepType: <select name="stepTypeSelect" ng-model="tip.stepType" ng-change="setSubTypes(tip.stepType, $index)" required> <option value="">Select StepType</option> <option ng-repeat="stepType in stepTypes">{{stepType}}</option> </select> StepSubType: <select name="stepSubTypeSelect" ng-model="tip.stepSubType" ng-options="stepSubType for stepSubType in subTypes[$index]" required> </select> </li> <li> Step Tip: <br> <div class="bg-warning"> Title: <input type="text" ng-model="tip.stepTip.title" size="50" name="tipTitle"><br> Text: <textarea ng-model="tip.stepTip.text" rows="4" cols="50" name="tipText"></textarea><br> <span ng-show="tipForm.tipText.$invalid">Must enter text for the tip</span><br> PictureURL: <input type="url" ng-model="tip.stepTip.pictureURL" name="tipPic" size="70"> <br> <span ng-show="tipForm.tipPic.$invalid">PictureURL must be a URL</span><br> VideoTitle: <input type="text" ng-model="tip.stepTip.videoTitle" size="50" name="tipVidTitle"><br> VideoInfo: <input type="text" ng-model="tip.stepTip.videoInfo.videoId" name="tipVidId" size="50" placeholder="ID"> <input type="text" ng-model="tip.stepTip.videoInfo.end" name="tipVidEnd" size="50" placeholder="End Time"><br> <span ng-show="tipForm.tipVid.$invalid">VideoURL must be a URL</span><br> </div> </li> <button ng-click="removeTip($index)" class="btn btn-danger btn-xs">Remove Tip</button> </ul> </div> <button class="btn btn-warning btn-sm" ng-click="addIngredientTip()">Add Ingredient Tip</button><br><br> <button class="btn btn-default" ng-click="reset()">Reset</button> <button class="btn btn-info" ng-click="preview()">Preview Ingredient</button> <button class="btn btn-success" ng-click="save()" ng-disabled="ingredientForm.$invalid || !ingredientSanityCheck()">Save</button> </form> <br> <pre>Ingredient: {{ingredient | json}}</pre><br> <h2>Current Ingredients</h2> <ul> <li ng-repeat="ingredient in ingredients"> <p><b>Name</b>: {{ingredient.name[\'standardForm\']}}</p> <pre>Forms: {{ingredient.ingredientForms | json}}</pre> <pre>Tips: {{ingredient.ingredientTips | json}}</pre> </li> </ul> </div>'),a.put("views/itemcollections.html",'<div> <h2>Input Item Collections</h2> <a class="btn btn-link active" ng-href="#/itemCollections">Create</a> <a class="btn btn-link" ng-href="#/editItemCollections">Edit</a><br> <form novalidate name="itemCollectionsForm"> Name: <input type="text" ng-model="itemCollection.name" size="50" required name="nameInput"><br><br> Description: <textarea ng-model="itemCollection.description" rows="4" cols="50" required name="descriptionInput"></textarea><br><br> ItemType: <select name="itemTypeSelect" ng-model="itemCollection.itemType" ng-options="itemType as itemType for itemType in itemTypes" required></select><br><br> <button class="btn btn-large btn-success" ng-click="save()" ng-disabled="itemCollectionsForm.$invalid">Save Collection</button> </form> <pre>\n    {{itemCollection | json}}\n  </pre> </div>'),a.put("views/lesson.html",'<div> <h2>Input Lesson</h2> <a class="btn btn-link active" ng-href="#/lesson">Create</a> <a class="btn btn-link" ng-href="#/editLessons">Edit</a><br> <form novalidate name="lessonForm"> Name: <input type="text" ng-model="lesson.name" size="50" required name="nameInput"><br><br> Time Estimate (minutes): <input type="text" ng-model="lesson.timeEstimate" size="50" required name="timeEstimateInput"><br><br> Description: <textarea ng-model="lesson.description" rows="4" cols="50" required name="descriptionInput"></textarea><br><br> Is Article? <input type="checkbox" ng-model="lesson.isArticle"><br><br> <s ng-show="!getArticleLabel()">Article:</s> <span ng-show="getArticleLabel()">Article:</span> <select ng-disabled="!lesson.isArticle" name="articleSelect" ng-model="lesson.articleId" ng-options="article._id as article.title for article in lesson.articles"></select><br><br> <s ng-show="!getItemLabel()">Item Type:</s> <span ng-show="getItemLabel()">Item Type:</span> <select ng-disabled="lesson.isArticle" name="itemTypeSelect" ng-model="itemType" ng-options="itemType for itemType in itemTypes"></select><br><br> <s ng-class="!getItemLabel()">Item:</s> <span ng-class="getItemLabel()">Item:</span> <select ng-disabled="lesson.isArticle" name="itemSelect" ng-model="selectedItem" ng-options="item._id as item.title for item in getSelectedTypeItems()"></select><br><br> <button class="btn btn-warning btn-sm" ng-click="addItem()" ng-disabled="lesson.isArticle || !selectedItem">Add Item</button><br><br> <button class="btn btn-success btn-sm" ng-click="addAllOfItemType()" ng-disabled="!canAddAllForItemType()">Add All For Item Type</button><br><br> Added Items: <div ng-repeat="id in lesson.itemIds"> <p>{{id.itemType}}: {{id.id}}</p> <button class="btn btn-xs btn-danger" ng-click="removeItemId($index)">Remove</button> </div> <button class="btn btn-primary btn-lg" ng-click="save()">Save</button> <button class="btn btn-danger btn-lg" ng-click="reset()">Reset</button> </form> <h4>Preview</h4> <pre>{{lesson | json}}</pre> </div>'),a.put("views/placestepinput.html",'<div ng-form="placeStepForm" class="bg-warning"> <b>Place Step</b><br> PlaceType: <select name="placeTypeSelect" ng-model="constructingStep.stepSpecifics[1].val" ng-options="placeType for placeType in placeTypes" required></select><br> PlaceModifier: <input type="text" ng-model="constructingStep.stepSpecifics[0].val" size="50" name="placeModifierInput"><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Ingredient Inputs (step or ingredient type): <step-input-form constructing-step="constructingStep" input-name="ingredientInputs" is-multiple="true" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Dish Input (step or dish): <step-input-form constructing-step="constructingStep" input-name="dishProductInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Product Name: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text:<br> <pre>Place [members of ingredientInput1], ..., and [members of ingredientInputN] on [dish from DishInput] with [ingredients from DishInput]</pre> </div> </div>'),a.put("views/placestepitem.html",'<div> <b>Place Step</b><br> <p>Step Duration: {{step.stepDuration}}</p> <p><em>Ingredient Inputs</em></p> <div ng-repeat="input in step.ingredientInputs"> <p>SourceType: {{input.sourceType}}</p> <p>SourceId: {{input.sourceId}}</p> <p>Key: {{input.key}}</p> <br> </div> <p><em>Dish Product Input</em></p> <p>SourceType: {{step.dishProductInput.sourceType}}</p> <p>SourceId: {{step.dishProductInput.sourceId}}</p> <p>Key: {{step.dishProductInput.key}}</p> <p>Product Name: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/preheatovenstepinput.html",'<div ng-form="preheatOvenStepForm" class="bg-warning"> <b>Preheat Oven Step</b><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Oven Temperature: <input type="text" ng-model="constructingStep.stepSpecifics[0].val" required name="overTemperatureInput" size="50"><br> Product Name: <input type="text" ng-model="constructingStep.productName" required name="productInputName" size="50"><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text:<br> <pre>Preheat oven to [ovenTemperature]</pre> </div> </div>'),a.put("views/preheatovenstepitem.html",'<div> <b>Preheat Oven Step</b><br> <p>Step Duration: {{step.stepDuration}}</p> <p>Oven Temperature: {{step.ovenTemperature}}</p> <p>Product Name: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/recipes.html",'<div> <h2>Recipe Input</h2> <!--Active class for one currently on--> <a class="btn btn-link active" ng-href="#/recipes">Create</a> <a class="btn btn-link" ng-href="#/editRecipes">Edit + Duplicate</a><br> <form novalidate name="recipeForm" ng-controller="RecipeCtrl"> Name: <input type="text" ng-model="recipe.name" size="50" ng-focus="logRecipeName()" ng-blur="updateRecipeName()" required name="nameInput"> <span ng-show="recipeForm.nameInput.$invalid">give the recipe a name</span><br> <br> Description: <textarea ng-model="recipe.description" rows="4" cols="50" required name="descInput"></textarea> <span ng-show="recipeForm.descInput.$invalid">give the recipe a description</span><br> Collections: <br> <div ng-repeat="collection in recipeCollections"> <input type="checkbox" ng-model="collection.useInRecipe"> <span>{{collection.name}}</span> </div><br><br> Main Picture URL: <input type="url" ng-model="recipe.mainPictureURL" size="70" name="mainPicInput" required><br> Main Video: <input type="text" ng-model="recipe.mainVideo.videoId" size="70" name="mainVidIdInput" placeholder="Video Id"> <input type="text" ng-model="recipe.mainVideo.end" size="70" name="mainVidEndInput" placeholder="End Time"><br><br> RecipeType: <select name="typeSelect" ng-model="recipe.recipeType" ng-options="recipeType for recipeType in recipeTypes" required></select> <span ng-show="recipeForm.typeSelect.$invalid">select a recipe type</span><br><br> RecipeCategory: <select name="categorySelect" ng-model="recipe.recipeCategory" ng-options="recipeCategory for recipeCategory in recipeCategories" required></select> <span ng-show="recipeForm.categorySelect.$invalid">select a recipe category</span><br><br> Active Time: <input type="text" ng-pattern="integerval" ng-model="recipe.manActiveTime"><br><br> Total Time: <input type="text" ng-pattern="integerval" ng-model="recipe.manTotalTime"><br><br> Default Serving Size: <select name="servingSizeSelect" ng-model="recipe.defaultServingSize" ng-options="size for size in servingSizes" required></select><br> Primary Cooking Method: <select name="primaryCookingSelect" ng-model="recipe.primaryCookingMethod" ng-options="method for method in cookingMethods" required></select><br> <span ng-show="recipeForm.primaryCookingSelect.$invalid">select a cooking method</span> Other Cooking Methods: <select name="otherCookingSelect" ng-options="method for method in cookingMethods" ng-model="otherCookingMethod"></select> <button class="btn btn-info btn-xs" ng-click="addCookingMethod()">Add Secondary Cooking Method</button> <div ng-repeat="method in recipe.otherCookingMethods"> {{method}} <button class="btn btn-danger btn-xs" ng-click="removeCookingMethod($index)"> - </button> </div><br><br> Can Add Seasoning: <input type="checkbox" ng-model="recipe.canAddSeasoningProfile"><br><br> Default Seasoning: <select name="seasoningSelect" ng-model="recipe.defaultSeasoningProfile" ng-options="profile.name for profile in seasoningProfiles" ng-disabled="!recipe.canAddSeasoningProfile"></select><br><br> Available Seasonings: <br> <div ng-repeat="profile in seasoningProfiles" ng-if="recipe.canAddSeasoningProfile"> <input type="checkbox" ng-model="profile.useInChoiceSeasonings"> <span>{{profile.name}}</span> </div> <h4>Ingredient List</h4> <b>Ingredient Types</b><br><br> <div ng-repeat="type in ingredientList.ingredientTypes" class="bg-warning" ng-form="typeForm"> TypeName: <input type="text" ng-model="type.typeName" size="50" required name="typeNameInput"> <span ng-show="typeForm.typeName.$invalid">give a type name</span><br><br> DisplayName: <input type="text" ng-model="type.displayName" size="50" required name="displayNameInput"> <span ng-show="typeForm.displayName.$invalid">give a display name</span><br><br> Min Ingredients Needed: <input type="text" ng-model="type.minNeeded" size="30" required name="minNeeded" ng-pattern="integerval"> <span ng-show="typeForm.minNeeded.$invalid">give a number for minNeeded</span><br><br> Ingredients: <select name="ingredientSelect" ng-model="typeIngredient" ng-options="ingredient.name.standardForm for ingredient in ingredients" ng-init="setSelectedIngredientForms(typeIngredient)" ng-change="setSelectedIngredientForms(typeIngredient)"></select> <span ng-show="type.ingredients.length === 0">there must be at least one ingredient in a type</span> <div ng-repeat="form in typeIngredient.ingredientForms"> {{form.name}}: <input type="checkbox" ng-model="selectedIngredientForms[$index]"> </div> <br> <button class="btn btn-primary btn-xs" ng-click="addTypeIngredient($index, typeIngredient)" ng-disabled="!isAFormSelected()">Add Ingredient</button><br> <div ng-repeat="ingredient in type.ingredients"> <pre>{{ingredient | json}}</pre><button class="btn btn-danger btn-xs" ng-click="removeTypeIngredient(type, $index)"> - </button> </div><br><br> <button class="btn btn-danger btn-sm" ng-click="removeIngredientType($index)">Remove Ingredient Type</button><br><br> </div> <button class="btn btn-primary btn-sm" ng-click="addIngredientType()">Add Ingredient Type</button><br><br> <b>Equipment Needed</b><br> <select name="equipmentSelect" ng-model="typeDish" ng-options="dish.name for dish in dishes"></select> <button class="btn btn-primary btn-xs" ng-click="addDish()">Add Dish</button> <div ng-repeat="dish in ingredientList.equipmentNeeded"> <pre>{{dish.name}}</pre><button class="btn btn-danger btn-xs" ng-click="removeDish($index)"> - </button> </div> Primary Ingredient Type: <select name="primaryIngredientTypeSelect" ng-model="recipe.primaryIngredientType" ng-options="type.typeName as type.typeName for type in ingredientList.ingredientTypes" required></select><br><br> <h4>Step List</h4> <div ng-form="stepForm"> <b>Add New Step: </b><br><br> StepType <select name="stepTypeSelect" ng-model="constructingStep.stepType" ng-options="stepType for stepType in stepTypes" ng-required="!recipeSanityCheck()"></select> <cut-step-input ng-if="constructingStep.stepType === \'Cut\'"></cut-step-input> <cook-step-input ng-if="constructingStep.stepType === \'Cook\'"></cook-step-input> <bake-step-input ng-if="constructingStep.stepType === \'Bake\'"></bake-step-input> <boil-step-input ng-if="constructingStep.stepType === \'Boil\'"></boil-step-input> <bring-to-boil-step-input ng-if="constructingStep.stepType === \'BringToBoil\'"></bring-to-boil-step-input> <custom-step-input ng-if="constructingStep.stepType === \'Custom\'"></custom-step-input> <dry-step-input ng-if="constructingStep.stepType === \'Dry\'"></dry-step-input> <heat-step-input ng-if="constructingStep.stepType === \'Heat\'"></heat-step-input> <place-step-input ng-if="constructingStep.stepType === \'Place\'"></place-step-input> <preheat-oven-step-input ng-if="constructingStep.stepType === \'PreheatOven\'"></preheat-oven-step-input> <sautee-step-input ng-if="constructingStep.stepType === \'Sautee\'"></sautee-step-input> <season-step-input ng-if="constructingStep.stepType === \'Season\'"></season-step-input> <slow-cook-step-input ng-if="constructingStep.stepType === \'SlowCook\'"></slow-cook-step-input> <steam-step-input ng-if="constructingStep.stepType === \'Steam\'"></steam-step-input> <stir-step-input ng-if="constructingStep.stepType === \'Stir\'" is-aux-step="false" constructing-step="constructingStep" ingredient-list="ingredientList" steplist="stepList" aux-step-arr-index=""></stir-step-input> <equipment-prep-step-input ng-if="constructingStep.stepType === \'EquipmentPrep\'"></equipment-prep-step-input> <br><br> </div> <button ng-disabled="stepForm.$invalid" ng-click="addStep()" class="btn btn-default">Append Step</button> <div ng-repeat="step in stepList" class="bg-info" ng-form="stepFormList"> <em>Step {{$index}}:</em> <cut-step-item ng-if="step.stepType === \'Cut\'"></cut-step-item> <cook-step-item ng-if="step.stepType === \'Cook\'"></cook-step-item> <custom-step-item ng-if="step.stepType === \'Custom\'"></custom-step-item> <bake-step-item ng-if="step.stepType === \'Bake\'"></bake-step-item> <boil-step-item ng-if="step.stepType === \'Boil\'"></boil-step-item> <bring-to-boil-step-item ng-if="step.stepType === \'BringToBoil\'"></bring-to-boil-step-item> <dry-step-item ng-if="step.stepType === \'Dry\'"></dry-step-item> <heat-step-item ng-if="step.stepType === \'Heat\'"></heat-step-item> <place-step-item ng-if="step.stepType === \'Place\'"></place-step-item> <preheat-oven-step-item ng-if="step.stepType === \'PreheatOven\'"></preheat-oven-step-item> <sautee-step-item ng-if="step.stepType === \'Sautee\'"></sautee-step-item> <season-step-item ng-if="step.stepType === \'Season\'"></season-step-item> <slow-cook-step-item ng-if="step.stepType === \'SlowCook\'"></slow-cook-step-item> <steam-step-item ng-if="step.stepType === \'Steam\'"></steam-step-item> <!--Need alterations to below once it\'s built?--> <stir-step-item ng-if="step.stepType === \'Stir\'"></stir-step-item> <equipmentprep-step-item ng-if="step.stepType === \'EquipmentPrep\'"></equipmentprep-step-item> <button ng-if="$last" ng-click="removeStep()">Remove Step</button> </div><br><br> <button class="btn btn-large btn-warning" ng-click="reset()">Reset Recipe Form</button> <button class="btn btn-large btn-info" ng-click="preview()">Preview Recipe</button> <button class="btn btn-large btn-success" ng-click="save()" ng-disabled="recipeForm.$invalid || !recipeSanityCheck()">Save Recipe</button> <h3>Current Recipe Being Built</h3> <pre>{{recipe | json}}</pre> </form> </div>'),a.put("views/sauteestepinput.html",'<div ng-form="sauteeStepForm" class="bg-warning"> <b>Sautee Step</b><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Sautee Duration: <input type="text" ng-model="constructingStep.stepSpecifics[0].val" required name="sauteeDurationInput" size="50"><br> Ingredient Inputs (step or ingredient type): <step-input-form constructing-step="constructingStep" input-name="ingredientInputs" is-multiple="true" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Dish Input (step or dish): <step-input-form constructing-step="constructingStep" input-name="dishInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Product Name: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <button ng-show="!auxStepAdded" class="btn btn-primary btn-sm" ng-click="addAuxStep()">Add Auxiliary Stir Step</button> <div ng-if="auxStepAdded"> <b>Auxiliary Stir Step:</b><br> <stir-step-input is-aux-step="true" constructing-step="constructingStep" ingredient-list="ingredientList" step-list="stepList" aux-step-arr-index=""></stir-step-input> <button class="btn btn-danger btn-xs" ng-click="removeAuxStep()">Remove Auxiliary Step</button> </div><br><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text: <br> <pre>Sautee the [members of ingredientInput1],..., and [members of ingredientInputN] for [sauteeDuration]. [auxiliaryStep]</pre> </div> </div>'),
a.put("views/sauteestepitem.html",'<div> <b>Sautee Step</b><br> <p>Step Duration: {{step.stepDuration}}</p> <p>Sautee Duration: {{step.sauteeDuration}}</p> <p><em>Ingredient Inputs</em></p> <div ng-repeat="input in step.ingredientInputs"> <p>SourceType: {{input.sourceType}}</p> <p>SourceId: {{input.sourceId}}</p> <p>Key: {{input.key}}</p> <br> </div> <p><em>Dish Product Input</em></p> <p>SourceType: {{step.dishProductInput.sourceType}}</p> <p>SourceId: {{step.dishProductInput.sourceId}}</p> <p>Key: {{step.dishProductInput.key}}</p> <p>Product Name: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/seasoningprofiles.html",'<div> <h2>Input Seasoning Profile</h2><br> <a class="btn btn-link active" ng-href="#/seasoningprofiles">Create</a> <a class="btn btn-link" ng-href="#/editSeasoningProfiles">Edit</a><br> <form novalidate name="seasoningForm"> Name: <input type="text" ng-model="seasoningProfile.name" size="50" required name="nameInput"><br><br> Spices: <input type="text" ng-model="seasoningProfile.spices" size="70" required name="spiceInput"><br> <p>Comma separated values (e.g. spice1,spice2,spice3) </p><br> <input type="button" class="btn btn-md" ng-click="reset()" value="Reset"> <input type="button" class="btn btn-md btn-success" ng-click="save()" value="Save" ng-disabled="seasoningForm.$invalid"> </form> <br> <h2>Current Seasoning Profiles</h2> <ul> <li ng-repeat="profile in profiles"> <p><b>Name</b>: {{profile.name}}</p> <p><b>Spices</b>: {{profile.spices}}</p> </li> </ul> </div>'),a.put("views/seasonstepinput.html",'<div ng-form="seasonStepForm" class="bg-warning"> <b>Season Step</b><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Is Oil: <input type="checkbox" ng-model="constructingStep.stepSpecifics[0].val"><br> Is Season: <input type="checkbox" ng-model="constructingStep.stepSpecifics[1].val"><br> Ingredient Input: <step-input-form constructing-step="constructingStep" input-name="ingredientInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Dish Input: <step-input-form constructing-step="constructingStep" input-name="dishInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Product Name: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text:<br> <pre>[isOil=Oil] and [isSeason=Season] the [ingredient1],..., and [ingredientN]</pre> </div> </div>'),a.put("views/seasonstepitem.html",'<div> <b>Season Step</b><br> <p>Step Duration: {{step.stepDuration}}</p> <p>Is Oil: {{step.isOil}}</p> <p>Is Season: {{step.isSeason}}</p> <p><em>Ingredient Input</em></p> <p>SourceType: {{step.ingredientInput.sourceType}}</p> <p>SourceId: {{step.ingredientInput.sourceId}}</p> <p>Key: {{step.ingredientInput.key}}</p> <br> <p><em>Dish Input</em></p> <p>SourceType: {{step.dishInput.sourceType}}</p> <p>SourceId: {{step.dishInput.sourceId}}</p> <p>Key: {{step.dishInput.key}}</p> <p>ProductName: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/slowcookstepinput.html",'<div ng-form="slowCookStepForm" class="bg-warning"> <b>SlowCook Step</b><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Slow Cook Duration: <input type="text" ng-model="constructingStep.stepSpecifics[0].val" required name="slowCookDurationInput" size="50"><br> Temperature Setting: <input type="text" ng-model="constructingStep.stepSpecifics[1].val" required name="tempSettingInput" size="50"><br> Ingredients Inputs (step or ingredient type): <step-input-form constructing-step="constructingStep" input-name="ingredientInputs" is-multiple="true" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> ProductName: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text: <br> <pre>Slow cook the [members of ingredientInput1],..., and [members of ingredientInputN] on [temperatureSetting] for [slowCookDuration]</pre> </div> </div>'),a.put("views/slowcookstepitem.html",'<div> <b>SlowCook Step</b><br> <p>Step Duration: {{step.stepDuration}}</p> <p>SlowCook Duration: {{step.slowCookDuration}}</p> <p>Temperature Setting: {{step.tempSetting}}</p> <p><em>Ingredient Inputs</em></p> <div ng-repeat="input in step.ingredientInputs"> <p>SourceType: {{input.sourceType}}</p> <p>SourceId: {{input.sourceId}}</p> <p>Key: {{input.key}}</p> <br> </div> <p>ProductName: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/steamstepinput.html",'<div ng-form="steamStepForm" class="bg-warning"> <b>Steam Step</b><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" required name="stepDurationInput" size="30" ng-pattern="integerval"><br> Steaming Duration: <input type="text" ng-model="constructingStep.stepSpecifics[0].val" required name="steamingDurationInput" size="50"><br> Ingredient Inputs: <step-input-form constructing-step="constructingStep" input-name="ingredientInputs" is-multiple="true" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Dish Input: <step-input-form constructing-step="constructingStep" input-name="dishInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Product Name: <input type="text" ng-model="constructingStep.productName" size="50" required name="productNameInput"><br> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"><br> <div ng-show="showExampleText"> Example Text: <br> <pre>Steam the [ingredient1],..., and [ingredientN] in the [steamingDish] for [steamingDuration]</pre> </div> </div>'),a.put("views/steamstepitem.html",'<div> <b>Steam Step</b><br> <p>Step Duration: {{step.stepDuration}}</p> <p>Steam Duration: {{step.steamDuration}}</p> <p><b>Ingredient Input</b></p> <p>SourceType: {{step.ingredientInput.sourceType}}</p> <p ng-if="step.ingredientInput.sourceId">SourceId: {{step.ingredientInput.sourceId}}</p> <p>Key: {{step.ingredientInput.key}}</p><br><br> <p><b>Dish Input</b></p> <p>SourceType: {{step.dishInput.sourceType}}</p> <p ng-if="step.dishInput.sourceId">SourceId: {{step.dishInput.sourceId}}</p> <p>Key: {{step.dishInput.key}}</p><br><br> <p>Product Name: {{step.productName}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/stepinputform.html",'<!--Not including checkboxes for \'isDish\' and \'isIngredient\' I don\'t believe that they need to be set here... I think that they can be set automatically based on context--> <div ng-form="stepInputSingleForm" ng-if="isMultiple === \'false\'" class="bg-info"> Source Type: <select name="sourceTypeSelect" ng-model="step.stepInputs[stepInputName].sourceType" ng-options="sourceType for sourceType in sourceTypes" required></select><br> <div ng-show="showStepId()"> SourceId: <select name="sourceIdSelect" ng-model="sourceIdStep" ng-options="step as getSourceIdSelectName(step, index) for (index, step) in stepList track by step.stepId" ng-change="registerSourceId(sourceIdStep)" ng-required="showStepId()"></select> </div> Key: <select ng-if="step.stepInputs[stepInputName].sourceType === \'StepProduct\'" name="stepKeySelect" ng-model="step.stepInputs[stepInputName].key" ng-options="product for product in getProductKeys(sourceIdStep)" ng-required="step.stepInputs[stepInputName].sourceType === \'StepProduct\'"></select> <select ng-if="step.stepInputs[stepInputName].sourceType === \'IngredientList\'" name="ingredKeySelect" ng-model="step.stepInputs[stepInputName].key" ng-options="type.typeName as type.typeName for type in ingredientList.ingredientTypes" ng-required="step.stepInputs[stepInputName].sourceType === \'IngredientList\'"></select> <select ng-if="step.stepInputs[stepInputName].sourceType === \'EquipmentList\'" name="equipKeySelect" ng-model="step.stepInputs[stepInputName].key" ng-options="dish.name as dish.name for dish in ingredientList.equipmentNeeded" ng-required="step.stepInputs[stepInputName].sourceType === \'EquipmentList\'"></select> </div> <div ng-if="isMultiple === \'true\'" ng-form="stepInputMultipleForm" class="bg-info" ng-repeat="input in step.stepInputs[stepInputName]"> Source Type: <select name="sourceTypeSelect" ng-model="input.sourceType" ng-options="sourceType for sourceType in sourceTypes" required></select><br> <div ng-if="showStepIdMultiple(input)"> SourceId: <select name="sourceIdSelect" ng-model="sourceIdStep[$index]" ng-options="step as getSourceIdSelectName(step, index) for (index, step) in stepList track by step.stepId" ng-change="registerSourceIdMultiple(input, $index, sourceIdStep)" ng-required="showStepIdMultiple(input)"></select> </div> Key: <select ng-if="input.sourceType === \'StepProduct\'" name="stepKeySelect" ng-model="input.key" ng-options="product for product in getProductKeys(sourceIdStep[$index])" ng-required="input.sourceType === \'StepProduct\'"></select> <select ng-if="input.sourceType === \'IngredientList\'" name="ingredKeySelect" ng-model="input.key" ng-options="type.typeName as type.typeName for type in ingredientList.ingredientTypes" ng-required="input.sourceType === \'IngredientList\'"></select> <select ng-if="input.sourceType === \'EquipmentList\'" name="equipKeySelect" ng-model="input.key" ng-options="dish.name as dish.name for dish in ingredientList.equipmentNeeded" ng-required="input.sourceType === \'EquipmentList\'"></select> <button class="btn btn-danger btn-xs" ng-click="removeInput($index)">Remove Input</button> </div> <button ng-if="isMultiple === \'true\'" class="btn btn-info btn-sm" ng-click="addInput()">Add Input</button>'),a.put("views/stirstepinput.html",'<div ng-form="stirStepForm"> <p ng-if="isAuxiliaryStep === \'true\'"><b>Auxiliary Step</b></p> <p ng-if="isAuxiliaryStep === \'false\'"><b>Stir Step</b></p> <div ng-if="isAuxiliaryStep === \'false\'"> <p>Stir Object Input</p> <step-input-form constructing-step="constructingStep" input-name="stirObjectInput" is-multiple="false" ingredient-list="ingredientList" step-list="stepList"></step-input-form><br> Step Duration: <input type="text" ng-model="constructingStep.stepDuration" size="30" required ng-pattern="integerval"><br> Product Name: <input type="text" ng-model="constructingStep.productName" size="50" required><br> When to Stir: <input type="text" ng-model="constructingStep.stepSpecifics[0].val" size="50" required><br> StirType: <select ng-model="constructingStep.stepSpecifics[1].val" ng-options="type for type in stirTypes" required></select><br> <!--Omitting the \'isAtSentenceBeginning\' property - probably hard to determine that from this vantage point--> </div> <div ng-if="isAuxiliaryStep === \'true\'"> <div ng-if="isAuxDictionary(constructingStep.stepType)"> When to Stir: <input type="text" ng-model="constructingStep.auxiliarySteps[auxStepArrIndex].stepSpecifics[0].val" size="50" required><br> StirType: <select ng-model="constructingStep.auxiliarySteps[auxStepArrIndex].stepSpecifics[1].val" ng-options="type for type in stirTypes" required></select><br> <!--Omitting the \'isAtSentenceBeginning\' property - probably hard to determine that from this vantage point--> </div> <div ng-if="!isAuxDictionary(constructingStep.stepType)"> When to Stir: <input type="text" ng-model="constructingStep.auxiliarySteps[0].stepSpecifics[0].val" size="50" required><br> StirType: <select ng-model="constructingStep.auxiliarySteps[0].stepSpecifics[1].val" ng-options="type for type in stirTypes" required></select><br> </div> </div> <div ng-if="isAuxiliaryStep === \'false\'"> <button ng-show="!tipAdded" class="btn btn-sm btn-primary" ng-click="addTip()">Add Tip</button><br> <button ng-show="tipAdded" class="btn btn-sm btn-primary" ng-click="toggleTipVisibility()">{{getTipToggleText()}}</button> <div ng-if="tipAdded"> <b>Step Tip</b><br> <div ng-if="tipIsMinimized"> Title: {{constructingStep.stepTip.title}} </div> <div ng-if="!tipIsMinimized"> Title: <input type="text" name="tipTitleInput" ng-model="constructingStep.stepTip.title" size="50"><br> Text: <textarea name="tipTextInput" ng-model="constructingStep.stepTip.text" rows="4" cols="50"></textarea><br> PictureURL: <input type="url" ng-model="constructingStep.stepTip.pictureURL" size="70" name="tipPictureInput"><br> VideoTitle: <input type="text" ng-model="constructingStep.stepTip.videoTitle" size="50" name="tipVideoTitleInput"><br> VideoInfo: <input type="text" ng-model="constructingStep.stepTip.videoInfo.videoId" size="50" name="tipVideoIdInput" placeholder="ID"> <input type="text" ng-model="constructingStep.stepTip.videoInfo.end" size="50" name="tipVideoEndInput" placeholder="End Time"><br> </div> <button class="btn btn-danger btn-xs" ng-click="removeTip()">Remove Tip</button> </div> </div> Show Example Step Text: <input type="checkbox" ng-model="showExampleText"> <br> <div ng-show="showExampleText"> Example Text:<br> <pre>[StirType] the [ingredient1], [ingredient2], and [ingredient3] [whenToStir]</pre> </div> </div>'),a.put("views/stirstepitem.html",'<div> <p ng-if="step.stirObjectInput"><b>Stir Step</b></p> <p ng-if="!step.stirObjectInput"><b>Auxiliary Step</b></p> <div ng-if="step.stirObjectInput"> <p><em>Stir Object Input</em></p> <p>SourceType: {{step.stirObjectInput.sourceType}}</p> <p ng-if="step.stirObjectInput.sourceId"> SourceId: {{step.stirObjectInput.sourceId}} </p> <p>Key: {{step.stirObjectInput.key}}</p><br> <p>StepDuration: {{step.stepDuration}}</p> <p>ProductName: {{step.productName}}</p> </div> <p ng-if="!step.stirObjectInput"> Ingredient Type: {{step.ingredientTypeName}} </p> <p>When to Stir: {{step.whenToStir}}</p> <p>Stir Type: {{step.stirType}}</p> <div ng-if="step.stepTip"> <p><b>Step Tip</b></p> <p>Title: {{step.stepTip.title}}</p> <p>Text: {{step.stepTip.text}}</p> <p ng-if="step.stepTip.pictureURL">PictureURL: {{step.stepTip.pictureURL}}</p> <p ng-if="step.stepTip.videoTitle">VideoTitle: {{step.stepTip.videoTitle}}</p> <p ng-if="step.stepTip.videoURL">VideoURL:{{step.stepTip.videoURL}}</p> </div> </div>'),a.put("views/textchunk.html",'<div ng-form="textChunkForm" class="bg-info"> Text: <textarea ng-model="textChunk.text" rows="4" cols="50" name="textChunkText" ng-trim="false"></textarea><br> Link (Optional): <br> ItemType: <select name="itemTypeSelect" ng-model="textChunk.itemType" ng-options="itemType for itemType in itemTypes"></select> <br> Item: <select name="itemSelect" ng-model="textChunk.linkedItem" ng-options="getTitle(item) for item in getItemsForType() track by item._id"></select> </div>'),a.put("views/trainingvideos.html",'<div> <h2>Input Training Videos</h2> <a class="btn btn-link" ng-href="#/trainingVideos">Create</a> <a class="btn btn-link active" ng-href="#/editTrainingVideos">Edit</a><br> <form novalidate name="trainingVideoForm"> Title: <input type="text" ng-model="trainingVideo.title" size="50" required name="titleInput"><br><br> Video: <input type="text" ng-model="trainingVideo.video.videoId" size="60" name="videoIdInput" placeholder="ID"> <input type="text" ng-model="trainingVideo.video.end" size="40" name="videoEndInput" placeholder="End Time"> <input type="text" ng-model="trainingVideo.video.caption" size="100" name="videoCaptionInput" placeholder="Caption"><br><br> Picture: <input type="url" ng-model="trainingVideo.picture.url" size="60" name="pictureURLInput" placeholder="URL"> <input type="text" ng-model="trainingVideo.picture.caption" size="100" name="pictureCaptionInput" placeholder="Caption"><br><br> Collections: <select name="itemCollectionSelect" ng-model="curCollectionId" ng-options="collection._id as collection.name for collection in trainingVideoCollections"></select><br> <ul> <div ng-repeat="collectionID in trainingVideo.collectionIds"> <li>{{collectionID}}</li> <button ng-click="removeCollection($index)">Remove</button> </div> </ul> <button ng-click="addCollection()">Add Collection</button><br><br> <button class="btn btn-large btn-default" ng-click="reset()">Reset Form</button> <button class="btn btn-large btn-success" ng-click="save()" ng-disabled="trainingVideoForm.$invalid || !trainingVideoSanityCheck()">Save Entry</button> </form> <pre>\n    {{trainingVideo | json}}\n  </pre> </div>'),a.put("views/viewallrecipes.html",'<div> <div ng-repeat="recipe in recipes"> <b>{{recipe.name}} </b> <button ng-if="!isExpandedArr[$index]" ng-click="toggleRecipeExpansion($index)" class="btn btn-info btn-sm">Expand Recipe</button><br><br> <button ng-if="isExpandedArr[$index]" class="btn btn-warning btn-sm" ng-click="toggleRecipeExpansion($index)">Minimize Recipe</button><br><br> <div ng-if="isExpandedArr[$index]"> <em>Description: </em> <p>{{recipe.description}}</p> <em>Prep Time</em> <p>{{recipe.prepTime}}</p> <em>Total Time</em> <p>{{recipe.totalTime}}</p> <em>RecipeType: </em> <p>{{recipe.recipeType}}</p> <em>RecipeCategory: </em> <p>{{recipe.recipeCategory}}</p> <em>Primary Cooking Method</em> <p>{{recipe.primaryCookingMethod}}</p> <em>Other Cooking Methods</em> <span ng-repeat="method in recipe.otherCookingMethods">{{method}} -- </span><br> <em>Can Add Seasoning: </em> <p>{{recipe.canAddSeasoningProfile}}</p> <em ng-if="recipe.defaultSeasoningProfile">Default Seasoning: </em> <p ng-if="recipe.defaultSeasoningProfile">{{recipe.defaultSeasoningProfile}}</p> <b>Ingredient List</b><br> <em>Ingredient Types:</em><br> <div ng-repeat="type in recipe.ingredientList.ingredientTypes"> <p>TypeName: {{type.typeName}}</p> <p>MinNeeded: {{type.minNeeded}}</p> <p>Ingredients: </p> <div ng-repeat="ingredient in type.ingredients"> <p>Name: {{ingredient.name}}</p> <p>IngredientForms:</p> <span ng-repeat="form in ingredient.ingredientForms">{{form.name}} -- </span> </div> </div> <em>Equipment Needed</em> <div ng-repeat="dish in equimentNeeded"> <span>{{dish.name}} -- </span> </div> <em>Step List</em><br> <div ng-repeat="step in recipe.stepList"> {{$index}}. <pre>{{step | json}}</pre> </div> </div> </div> </div>')}]);